I";"<h2 id="零-核心问题">零. 核心问题</h2>

<ol>
  <li>网站可用性如何衡量？
    <ul>
      <li>指标</li>
      <li>考核</li>
    </ul>
  </li>
  <li>如何设计高可用的系统？
    <ul>
      <li>冗余</li>
      <li>失效转移</li>
    </ul>
  </li>
</ol>

<hr />
<hr />
<h2 id="一-网站可用性的衡量">一. 网站可用性的衡量</h2>
<hr />

<h4 id="1-可用性度量">1. 可用性度量</h4>
<ul>
  <li>9的多少数量来衡量
    <ul>
      <li>90% 小于36天12小时</li>
      <li>99% 小于87小时36分钟</li>
      <li>99.9% 小于8小时46分钟</li>
      <li>99.99% 小于52分钟33秒</li>
      <li>99.999% 小于5分钟15秒</li>
      <li>99.9999% 小于31.5秒</li>
    </ul>
  </li>
</ul>

<hr />
<h4 id="2-可用性考核">2. 可用性考核</h4>
<ul>
  <li>数据和服务的冗余备份</li>
  <li>数据和服务的失效转移</li>
</ul>

<hr />
<hr />
<h2 id="二-高可用的应用">二. 高可用的应用</h2>

<hr />
<h4 id="1-负载均衡进行无状态服务的失效转移">1. 负载均衡进行无状态服务的失效转移</h4>
<ul>
  <li>无状态，实现所有服务器完全对等</li>
  <li>失效转移，某一个出现问题能够及时剔除</li>
</ul>

<hr />
<h4 id="2-应用服务器集群的session管理">2. 应用服务器集群的Session管理</h4>
<ul>
  <li>业务总是有状态的</li>
  <li>Session,多次请求使用的上下文对象
    <ol>
      <li>Session复制
   	- 每台都备份一份
   		- 空间/带宽浪费较多</li>
      <li>Session绑定
   	- 通过负载均衡将请求分发到同一台服务器
   	- 一旦宕机就会导致无法完成业务处理</li>
      <li>利用Cookie存储Session
   	- Cookie大小受限
   	- 传输耗费性能
   	- 浏览区关闭Cookie会导致不可用</li>
      <li>Session服务器
   	- Session服务集群统一管理Session</li>
    </ol>
  </li>
</ul>

<hr />
<hr />
<h2 id="三-高可用的服务">三. 高可用的服务</h2>

<hr />
<h4 id="1-分级管理">1. 分级管理</h4>
<ul>
  <li>服务分级管理
    <ul>
      <li>核心应用和服务使用更好的配置</li>
    </ul>
  </li>
  <li>服务部署隔离
    <ul>
      <li>避免故障的连锁反应</li>
    </ul>
  </li>
</ul>

<hr />
<h4 id="2-超时设置">2. 超时设置</h4>
<ul>
  <li>由于服务失去响应导致用户请求长时间得不到响应
    <ul>
      <li>同时还占用资源</li>
      <li>设置超时时间</li>
    </ul>
  </li>
</ul>

<hr />
<h4 id="3-异步调用">3. 异步调用</h4>
<ul>
  <li>通过消息队列等异步方式，避免一个服务失败导致整个过程失败
    <ul>
      <li></li>
    </ul>
  </li>
</ul>

<hr />
<h4 id="4-服务降级">4. 服务降级</h4>
<ul>
  <li>访问高峰，服务因大量并发而性能下降，为保证核心应用和功能的正常运行
    <ul>
      <li>拒绝服务
        <ul>
          <li>拒绝低优先级应用的调用</li>
          <li>减少服务调用并发数</li>
        </ul>
      </li>
      <li>关闭功能
        <ul>
          <li>关闭部分不重要的服务</li>
          <li>节约系统开销，为重要的服务和功能让出资源</li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<hr />
<h4 id="5-幂等性设计">5. 幂等性设计</h4>
<ul>
  <li>服务重复调用和调用一次产生的结果相同
    <ul>
      <li>解决服务重复调用问题</li>
    </ul>
  </li>
</ul>

<hr />
<hr />
<h2 id="四-高可用的数据">四. 高可用的数据</h2>

<hr />
<h4 id="1-cap原理">1. CAP原理</h4>
<ul>
  <li>C: Consistency（数据一致性）
    <ul>
      <li>多份副本数据不一致</li>
      <li>所有程序都能访问得到相同的数据</li>
    </ul>
  </li>
  <li>A: Availability（数据可用性）
    <ul>
      <li>多份副本其中某个损坏，需要将访问切换到可用的副本上</li>
      <li>任何时候程序能都可与读写访问</li>
    </ul>
  </li>
  <li>P: Partition Tolerance（分区耐受性）
    <ul>
      <li>系统可以跨网络分区线性伸缩</li>
    </ul>
  </li>
  <li>大型网站通常选择AP,一定程度上放弃C
    <ul>
      <li>数据强一致性
        <ul>
          <li>各个副本的数据在物理存储中总是一致</li>
          <li>数据更新操作结果操作响应总是一致，不处于不确定状态</li>
        </ul>
      </li>
      <li>数据用户一致
        <ul>
          <li>各个副本的数据在物理存储中可能不一致</li>
          <li>终端用户访问，通过纠错和教研机制，可以确定一个一致且正确的数据</li>
        </ul>
      </li>
      <li>数据最终一致
        <ul>
          <li>各个副本的数据在物理存储中可能不一致</li>
          <li>终端用户访问，可能不一致</li>
          <li>但是经过一段时间的自我恢复和修正，数据最终会达成一致</li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<hr />
<h4 id="2-数据备份">2. 数据备份</h4>
<ul>
  <li>冷备份
    <ul>
      <li>缺点
        <ul>
          <li>不能保证数据一致性</li>
          <li>备份结束时间后更新的数据会丢失</li>
          <li>不能保证可用性，恢复时间较长</li>
        </ul>
      </li>
      <li>优点
        <ul>
          <li>可靠性高，有效</li>
        </ul>
      </li>
    </ul>
  </li>
  <li>热备份
    <ul>
      <li>异步热备
        <ul>
          <li>操作成功保证写入一个成功，其他副本的写入异步完成</li>
          <li>分为主存储服务器和从服务器</li>
          <li>正常情况下只连接主存储器</li>
        </ul>
      </li>
      <li>同步热备
        <ul>
          <li>多分数据副本的写入操作同步完成</li>
          <li>存储服务器没有主从之分</li>
          <li>性能由最慢那台决定</li>
        </ul>
      </li>
      <li>实践中通常做法
        <ul>
          <li>写操作只访问Master数据库</li>
          <li>读操作只访问Slave数据库</li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<hr />
<h4 id="3-失效转移">3. 失效转移</h4>
<ul>
  <li>失效确认
    <ul>
      <li>心跳检测</li>
      <li>访问失败报告</li>
    </ul>
  </li>
  <li>访问转移
    <ul>
      <li>对等服务器</li>
      <li>不对等服务器</li>
    </ul>
  </li>
  <li>数据恢复
    <ul>
      <li>部分服务宕机时，数据存储的副本减少，必须将副本的数量恢复到系统设定的值</li>
      <li>系统从正常的服务复制数据</li>
    </ul>
  </li>
</ul>

<hr />
<hr />
<h2 id="五-高可用软件质量保证">五. 高可用软件质量保证</h2>
<hr />
<h4 id="1-网站发布">1. 网站发布</h4>
<ul>
  <li>关闭服务器集群中的一小部分</li>
  <li>发布过的服务可以立即访问</li>
  <li>整个发布过程不影响用户使用</li>
</ul>

<hr />
<h4 id="2-自动化测试">2. 自动化测试</h4>
<ul>
  <li>Selenium
    <ul>
      <li>功能测试</li>
      <li>浏览器兼容测试</li>
    </ul>
  </li>
</ul>

<hr />
<h4 id="3-预发布验证">3. 预发布验证</h4>
<ul>
  <li>避免环境不一致导致上线异常</li>
  <li>通过预发布服务器进行预发布验证</li>
  <li>与线上的唯一不同是没有配置在负载均衡服务器上</li>
</ul>

<hr />
<h4 id="4-代码控制">4. 代码控制</h4>
<ul>
  <li>主干开发，分支发布
    <ul>
      <li>主干代码反应目前整体应用的状态一目了然，便于管理和控制</li>
    </ul>
  </li>
  <li>分支开发，主干发布
    <ul>
      <li>当前主要使用的方式</li>
    </ul>
  </li>
</ul>

<hr />
<h4 id="5-自动化发布">5. 自动化发布</h4>
<ul>
  <li>基于规则驱动的流程</li>
</ul>

<hr />
<h4 id="6-灰度发布ab测试">6. 灰度发布（AB测试）</h4>
<ul>
  <li>将服务器分成若干部分</li>
  <li>每天只发布一部分服务器</li>
  <li>观察运行稳定没有问题</li>
  <li>如果发现问题回滚已发布的服务器</li>
</ul>

<hr />
<hr />
<h2 id="六-网站运行监控">六. 网站运行监控</h2>
<ul>
  <li>不允许没有监控的系统上线</li>
</ul>

<hr />
<h4 id="1-监控数据采集">1. 监控数据采集</h4>
<ol>
  <li>用户行为日志收集
    <ul>
      <li>服务端日志</li>
      <li>客户端日志</li>
    </ul>
  </li>
  <li>服务器性能监控
    <ul>
      <li>收集服务器性能指标</li>
    </ul>
  </li>
  <li>运行数据报告
    <ul>
      <li>监控具体业务场景相关的技术和业务
        <ul>
          <li>平均响应延迟时间</li>
          <li>邮件数目</li>
          <li>缓存命中率</li>
        </ul>
      </li>
    </ul>
  </li>
</ol>

:ET