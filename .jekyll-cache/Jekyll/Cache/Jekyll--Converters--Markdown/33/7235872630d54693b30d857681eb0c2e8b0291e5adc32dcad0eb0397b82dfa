I"/<h2 id="零-核心问题">零. 核心问题</h2>
<ol>
  <li>什么是高伸缩性？
    <ul>
      <li>仅通过改变部署的服务器数量就可以扩大或缩小网站的处理能力</li>
    </ul>
  </li>
  <li>如何实现高伸缩性？
    <ul>
      <li>功能物理分离</li>
      <li>集群
        <ul>
          <li>应用服务器集群</li>
          <li>数据服务器集群</li>
        </ul>
      </li>
    </ul>
  </li>
</ol>

<h2 id="一-伸缩性设计">一. 伸缩性设计</h2>
<hr />

<h4 id="网站架构伸缩性设计">网站架构伸缩性设计</h4>

<ol>
  <li>不同功能进行物理分离实现伸缩
    <ul>
      <li>纵向分离
        <ul>
          <li>将业务处理流程上的不同部分分离部署，实现系统伸缩性</li>
        </ul>
      </li>
      <li>横向分离
        <ul>
          <li>将不同的业务员模块分离部署，实现系统伸缩性</li>
        </ul>
      </li>
    </ul>
  </li>
  <li>单一功能通过集群规模实现伸缩
    <ul>
      <li>应用服务器集群</li>
      <li>数据服务器集群
        <ul>
          <li>缓存数据服务器集群</li>
          <li>存储数据服务器集群</li>
        </ul>
      </li>
    </ul>
  </li>
</ol>

<h2 id="二-服务器集群的伸缩性设计">二. 服务器集群的伸缩性设计</h2>

<ol>
  <li>HTTP重定向负载均衡
    <ul>
      <li>利用HTTP重定向协议实现负载均衡</li>
      <li>优点
        <ul>
          <li>简单</li>
        </ul>
      </li>
      <li>缺点
        <ul>
          <li>浏览器需要请求两次服务器才能完成一次访问</li>
          <li>重定向服务器可能成为瓶颈</li>
          <li>重定向可能被搜索引擎判断为SEO作弊</li>
        </ul>
      </li>
    </ul>
  </li>
  <li>DNS域名解析负载均衡
    <ul>
      <li>域名解请求会根据负载均衡算法计算出一个不同的IP地址返回</li>
      <li>优点
        <ul>
          <li>省掉了网站管理维护负载均衡服务器</li>
          <li>可以将域名解析成距离用户地理最近的一个服务器地址</li>
        </ul>
      </li>
      <li>缺点
        <ul>
          <li>由于DNS的多级缓存，导致修改后生效事件较长</li>
          <li>DNS负载均衡控制权在域名服务那里，网站无法对其作更多的改善</li>
        </ul>
      </li>
    </ul>
  </li>
  <li>反向代理负载均衡
    <ul>
      <li>在HTTP协议层面转发请求，应用层负载均衡</li>
      <li>优点
        <ul>
          <li>部署简单</li>
        </ul>
      </li>
      <li>缺点
        <ul>
          <li>性能可能成为瓶颈</li>
        </ul>
      </li>
    </ul>
  </li>
  <li>IP负载均衡
    <ul>
      <li>在网络层通过修改目标地址进行负载均衡</li>
      <li>优点
        <ul>
          <li>IP负载均衡在内核进程完成数据分发，较反向发力负载均衡有更好的处理性能</li>
        </ul>
      </li>
      <li>缺点
        <ul>
          <li>集群的最大响应数据吞吐量受制于负载均衡服务器的网卡带宽</li>
        </ul>
      </li>
    </ul>
  </li>
  <li>数据链路层负载均衡
    <ul>
      <li>三角传输模式</li>
      <li>负载均衡数据分发过程中不修改IP地址，只修改目的mac地址</li>
      <li>目前使用最广的负载均衡手段</li>
    </ul>
  </li>
  <li>负载均衡算法
    <ul>
      <li>轮询（Round Robin）</li>
      <li>加权轮询（Weighted Round Robin）</li>
      <li>随机（Random）</li>
      <li>最少连接（Least Connections）</li>
      <li>源地址散列（Source Hashing）
        <ul>
          <li>对IP做Hash计算，得到应用服务器，实现同一个请求总在同一个服务器上处理</li>
        </ul>
      </li>
    </ul>
  </li>
</ol>

<h2 id="三-分布式缓存集群的伸缩性设计">三. 分布式缓存集群的伸缩性设计</h2>

<ol>
  <li>Memcached分布式缓存集群的访问模型
    <ul>
      <li>应用程序 -&gt; Memcached API</li>
      <li>Memcached API -&gt; 通信模块 -&gt; Memcached服务器</li>
      <li>Memcached API -&gt; 路由算法 -&gt; 服务器列表</li>
    </ul>
  </li>
  <li>Memcached分布式缓存集群的伸缩性挑战
    <ul>
      <li>扩容</li>
    </ul>
  </li>
  <li>分布式缓存的一致性Hash算法
    <ul>
      <li>一致性Hash环</li>
    </ul>
  </li>
</ol>

<h2 id="四-数据存储服务器集群的伸缩性设计">四. 数据存储服务器集群的伸缩性设计</h2>

<ol>
  <li>关系数据库集群的伸缩性设计
    <ul>
      <li>主从读写分离</li>
      <li>分库分表</li>
      <li>分片
        <ul>
          <li>Amoeba</li>
          <li>Cobar</li>
        </ul>
      </li>
    </ul>
  </li>
  <li>NoSQL数据库的伸缩性设计
    <ul>
      <li>HBase</li>
      <li>Redis</li>
    </ul>
  </li>
</ol>

<h2 id="五-总结">五. 总结</h2>
<ol>
  <li>伸缩架构本身的设计是简单的</li>
  <li>当与可用性、正确性、性能等耦合到一起，伸缩性就复杂了</li>
  <li>综合考虑团队的知识储备和结构、管理层的战略愿景和规划</li>
</ol>

<h3 id="六-tips">六. Tips</h3>
<ol>
  <li>只有遇不到的问题，没有解决不了的问题</li>
  <li>高手之所以是高手，因为遇到了棘手的问题，并解决了</li>
</ol>

:ET