<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title></title>
    <description></description>
    <link>http://www.louishwh.top/</link>
    <atom:link href="http://www.louishwh.top/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Sat, 01 Jan 2022 12:06:05 +0800</pubDate>
    <lastBuildDate>Sat, 01 Jan 2022 12:06:05 +0800</lastBuildDate>
    <generator>Jekyll v4.2.0</generator>
    
      <item>
        <title>服务端技能点</title>
        <description>&lt;h3 id=&quot;服务端的比对&quot;&gt;服务端的比对&lt;/h3&gt;

&lt;hr /&gt;
&lt;ul&gt;
  &lt;li&gt;Web框架性能排名
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://www.techempower.com/benchmarks/#section=data-r19&amp;amp;hw=ph&amp;amp;test=fortune&quot;&gt;Web Framework Benchmarks&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;一些观点
    &lt;ol&gt;
      &lt;li&gt;Web框架性能有差，学习曲线、熟练程度、团队技能要求也有差&lt;/li&gt;
      &lt;li&gt;在兴趣和好奇下可以去追求极致的性能&lt;/li&gt;
      &lt;li&gt;在业务和发展下要追求稳定性、可用性、安全性和性能的平衡&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;
&lt;ul&gt;
  &lt;li&gt;数据库排行榜
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://db-engines.com/en/ranking&quot;&gt;DB-Engines&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://www.modb.pro/dbRank&quot;&gt;墨天轮&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;一些观点
    &lt;ol&gt;
      &lt;li&gt;优先把MySQL或PostgreSQL搞明白&lt;/li&gt;
      &lt;li&gt;Nosql可以深入研究一下Redis和HBase&lt;/li&gt;
      &lt;li&gt;当然根据自身需求学习：能用(80%)-&amp;gt;用好(20%)-&amp;gt;用到极致(4%)-&amp;gt;自制(0.8%)&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;服务端的技能点&quot;&gt;服务端的技能点&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;计算机常识(必须懂得的概念)
    &lt;ul&gt;
      &lt;li&gt;定义
        &lt;ul&gt;
          &lt;li&gt;作为计算机从业人员，必须掌握的概念&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;内容
        &lt;ul&gt;
          &lt;li&gt;算法+数据结构&lt;/li&gt;
          &lt;li&gt;编码&lt;/li&gt;
          &lt;li&gt;操作系统&lt;/li&gt;
          &lt;li&gt;数据库&lt;/li&gt;
          &lt;li&gt;网络&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;编程语言(必须深入了解一种)
    &lt;ul&gt;
      &lt;li&gt;常见的选择
        &lt;ul&gt;
          &lt;li&gt;Java/Kotlin(推荐👍)
            &lt;ul&gt;
              &lt;li&gt;技术体系完善&lt;/li&gt;
              &lt;li&gt;岗位最多&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;Go(推荐👍)
            &lt;ul&gt;
              &lt;li&gt;编译速度天下第一☝️&lt;/li&gt;
              &lt;li&gt;并发简单易用且高效&lt;/li&gt;
              &lt;li&gt;生态也不错&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;Python(推荐👍)
            &lt;ul&gt;
              &lt;li&gt;强大的第三方库资源&lt;/li&gt;
              &lt;li&gt;语法简洁&lt;/li&gt;
              &lt;li&gt;性能不够，C++来凑&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;.NET&lt;/li&gt;
          &lt;li&gt;C/C++
            &lt;ul&gt;
              &lt;li&gt;速度天下第一&lt;/li&gt;
              &lt;li&gt;适合对于性能要求很高的系统&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;Rust
            &lt;ul&gt;
              &lt;li&gt;性能接近C/C++&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;Node
            &lt;ul&gt;
              &lt;li&gt;优势在于密集IO&lt;/li&gt;
              &lt;li&gt;在较高的并发和尽可能的节省内存&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;PHP
            &lt;ul&gt;
              &lt;li&gt;小站用的比较多&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;Ruby
            &lt;ul&gt;
              &lt;li&gt;国外用的比较多&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;Swift
            &lt;ul&gt;
              &lt;li&gt;⚠️ 纯粹为iOSer们自娱自乐&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;一些观点
        &lt;ol&gt;
          &lt;li&gt;编程语言本身各有千秋
            &lt;ul&gt;
              &lt;li&gt;编程范式的支持&lt;/li&gt;
              &lt;li&gt;性能差异&lt;/li&gt;
              &lt;li&gt;语言生态差异&lt;/li&gt;
              &lt;li&gt;学习曲线差异&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;学习的意见
            &lt;ul&gt;
              &lt;li&gt;接纳不同，不设限制&lt;/li&gt;
              &lt;li&gt;用其所长，发挥价值&lt;/li&gt;
              &lt;li&gt;&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ol&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Web框架
    &lt;ul&gt;
      &lt;li&gt;语言自成体系
        &lt;ul&gt;
          &lt;li&gt;Java
            &lt;ul&gt;
              &lt;li&gt;&lt;a href=&quot;https://spring.io/&quot;&gt;Spring系列&lt;/a&gt;
                &lt;ul&gt;
                  &lt;li&gt;Spring 是核心引擎&lt;/li&gt;
                  &lt;li&gt;&lt;a href=&quot;https://spring.io/projects/spring-framework&quot;&gt;Spring MVC&lt;/a&gt;
                    &lt;ul&gt;
                      &lt;li&gt;基于Spring的MVC框架&lt;/li&gt;
                    &lt;/ul&gt;
                  &lt;/li&gt;
                  &lt;li&gt;&lt;a href=&quot;https://spring.io/projects/spring-boot&quot;&gt;Spring Boot&lt;/a&gt;
                    &lt;ul&gt;
                      &lt;li&gt;Spring下的一组开发包(包含Spring MVC)&lt;/li&gt;
                    &lt;/ul&gt;
                  &lt;/li&gt;
                  &lt;li&gt;&lt;a href=&quot;https://spring.io/projects/spring-cloud&quot;&gt;Sprint Cloud&lt;/a&gt;
                    &lt;ul&gt;
                      &lt;li&gt;微服务解决方案(包含Spring Boot)&lt;/li&gt;
                    &lt;/ul&gt;
                  &lt;/li&gt;
                  &lt;li&gt;&lt;a href=&quot;https://www.zhihu.com/question/64671972&quot;&gt;MVC &amp;amp; Boot&lt;/a&gt;&lt;/li&gt;
                  &lt;li&gt;&lt;a href=&quot;https://www.zhihu.com/question/280318988&quot;&gt;Boot &amp;amp; Cloud&lt;/a&gt;&lt;/li&gt;
                &lt;/ul&gt;
              &lt;/li&gt;
              &lt;li&gt;&lt;a href=&quot;https://www.dropwizard.io/en/latest/&quot;&gt;Dropwizard&lt;/a&gt;
                &lt;ul&gt;
                  &lt;li&gt;&lt;a href=&quot;https://www.overops.com/blog/java-bootstrap-dropwizard-vs-spring-boot/&quot;&gt;可参考&lt;/a&gt;&lt;/li&gt;
                &lt;/ul&gt;
              &lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;https://dev.to/speedwheel/top-6-web-frameworks-for-go-as-of-2017-34i&quot;&gt;Go&lt;/a&gt;
            &lt;ul&gt;
              &lt;li&gt;&lt;a href=&quot;https://github.com/astaxie/beego&quot;&gt;Beego&lt;/a&gt;&lt;/li&gt;
              &lt;li&gt;&lt;a href=&quot;https://github.com/kataras/iris&quot;&gt;Iris&lt;/a&gt;&lt;/li&gt;
              &lt;li&gt;&lt;a href=&quot;https://github.com/gin-gonic/gin&quot;&gt;Gin&lt;/a&gt;&lt;/li&gt;
              &lt;li&gt;&lt;a href=&quot;https://github.com/labstack/echo&quot;&gt;Echo&lt;/a&gt;&lt;/li&gt;
              &lt;li&gt;&lt;a href=&quot;https://github.com/revel/revel&quot;&gt;Revel&lt;/a&gt;&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;https://www.cnblogs.com/an-wen/p/11330834.html&quot;&gt;Python&lt;/a&gt;
            &lt;ul&gt;
              &lt;li&gt;&lt;a href=&quot;https://www.djangoproject.com/&quot;&gt;Django&lt;/a&gt;&lt;/li&gt;
              &lt;li&gt;&lt;a href=&quot;https://www.tornadoweb.org/en/stable/&quot;&gt;Tornado&lt;/a&gt;&lt;/li&gt;
              &lt;li&gt;&lt;a href=&quot;https://dormousehole.readthedocs.io/en/latest/&quot;&gt;Flask&lt;/a&gt;&lt;/li&gt;
              &lt;li&gt;&lt;a href=&quot;https://twistedmatrix.com/trac/&quot;&gt;Twisted&lt;/a&gt;&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;p&gt;&lt;a href=&quot;https://www.zhihu.com/question/366937369&quot;&gt;.NET&lt;/a&gt;&lt;/p&gt;
          &lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzAxNDI5NzEzNg==&amp;amp;mid=2651164874&amp;amp;idx=1&amp;amp;sn=38efbfb036b5f667403d87a9d70bffb3&amp;amp;chksm=80644195b713c88368c88d73bd092c4132f1b6908b12036775cebef5edc9606fd08c14accf1e&amp;amp;scene=21#wechat_redirect&quot;&gt;C/C++&lt;/a&gt;
            &lt;ul&gt;
              &lt;li&gt;&lt;a href=&quot;https://github.com/facebook/proxygen&quot;&gt;Proxygen&lt;/a&gt;&lt;/li&gt;
              &lt;li&gt;&lt;a href=&quot;https://github.com/ipkn/crow&quot;&gt;Crow&lt;/a&gt;&lt;/li&gt;
              &lt;li&gt;&lt;a href=&quot;https://github.com/microsoft/cpprestsdk&quot;&gt;C++ REST SDK&lt;/a&gt;&lt;/li&gt;
              &lt;li&gt;&lt;a href=&quot;https://github.com/an-tao/drogon&quot;&gt;Drogon&lt;/a&gt;
                &lt;ul&gt;
                  &lt;li&gt;这个现在还在性能榜第一☝️&lt;/li&gt;
                &lt;/ul&gt;
              &lt;/li&gt;
              &lt;li&gt;&lt;a href=&quot;https://github.com/oatpp/oatpp&quot;&gt;Oatpp&lt;/a&gt;&lt;/li&gt;
              &lt;li&gt;&lt;a href=&quot;https://github.com/oktal/pistache/&quot;&gt;Pistache&lt;/a&gt;&lt;/li&gt;
              &lt;li&gt;&lt;a href=&quot;https://github.com/matt-42/silicon/&quot;&gt;Silicon&lt;/a&gt;&lt;/li&gt;
              &lt;li&gt;&lt;a href=&quot;https://github.com/civetweb/civetweb&quot;&gt;CivetWeb&lt;/a&gt;&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;https://www.rust-lang.org/&quot;&gt;Rust&lt;/a&gt;
            &lt;ul&gt;
              &lt;li&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/398232138&quot;&gt;Rust的Web生态&lt;/a&gt;&lt;/li&gt;
              &lt;li&gt;&lt;a href=&quot;https://actix.rs/&quot;&gt;Actix&lt;/a&gt;&lt;/li&gt;
              &lt;li&gt;&lt;a href=&quot;https://rocket.rs/&quot;&gt;Rocket&lt;/a&gt;&lt;/li&gt;
              &lt;li&gt;&lt;a href=&quot;https://github.com/tokio-rs/axum&quot;&gt;Axum&lt;/a&gt;&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;https://nodejs.org&quot;&gt;Node.js&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/111015050&quot;&gt;PHP&lt;/a&gt;
            &lt;ul&gt;
              &lt;li&gt;&lt;a href=&quot;https://laravel.com/&quot;&gt;Laravel&lt;/a&gt;&lt;/li&gt;
              &lt;li&gt;&lt;a href=&quot;https://www.excellentwebworld.com/codeigniter-development/&quot;&gt;CodeIgniter&lt;/a&gt;&lt;/li&gt;
              &lt;li&gt;&lt;a href=&quot;https://symfony.com/&quot;&gt;Symfony&lt;/a&gt;&lt;/li&gt;
              &lt;li&gt;&lt;a href=&quot;https://www.zend.com/&quot;&gt;Zend&lt;/a&gt;&lt;/li&gt;
              &lt;li&gt;&lt;a href=&quot;https://www.yiiframework.com/&quot;&gt;YII2&lt;/a&gt;&lt;/li&gt;
              &lt;li&gt;&lt;a href=&quot;https://www.excellentwebworld.com/cakephp-development/&quot;&gt;Cakephp&lt;/a&gt;&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;http://www.ruby-lang.org&quot;&gt;Ruby&lt;/a&gt;
            &lt;ul&gt;
              &lt;li&gt;&lt;a href=&quot;https://github.com/rails/rails&quot;&gt;Ruby on Rails&lt;/a&gt;&lt;/li&gt;
              &lt;li&gt;&lt;a href=&quot;https://github.com/merb/merb&quot;&gt;Merb&lt;/a&gt;&lt;/li&gt;
              &lt;li&gt;&lt;a href=&quot;https://github.com/camping/mab&quot;&gt;Camping&lt;/a&gt;&lt;/li&gt;
              &lt;li&gt;&lt;a href=&quot;https://github.com/Ramaze/ramaze&quot;&gt;Ramaze&lt;/a&gt;&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;https://www.swift.org/&quot;&gt;Swift 看看就得了，权当尝试&lt;/a&gt;
            &lt;ul&gt;
              &lt;li&gt;&lt;a href=&quot;https://github.com/perfectlySoft/Perfect&quot;&gt;Perfect&lt;/a&gt;&lt;/li&gt;
              &lt;li&gt;&lt;a href=&quot;https://github.com/vapor/Vapor&quot;&gt;Vapor&lt;/a&gt;&lt;/li&gt;
              &lt;li&gt;&lt;a href=&quot;https://github.com/Kitura/Kitura&quot;&gt;Kitura&lt;/a&gt;&lt;/li&gt;
              &lt;li&gt;&lt;a href=&quot;https://github.com/zewo/Zewo&quot;&gt;Zewo&lt;/a&gt;&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;数据库&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;关系数据库
        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;https://github.com/mysql&quot;&gt;MySQL&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;https://github.com/postgres/postgres&quot;&gt;PostgreSQL&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;NoSQL
        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;https://github.com/redis/redis&quot;&gt;Redis&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;https://github.com/neo4j/neo4j&quot;&gt;Neo4j&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;https://github.com/apache/hbase&quot;&gt;HBase&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;https://github.com/elastic/elasticsearch&quot;&gt;Elasticsearch&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;https://github.com/google/leveldb&quot;&gt;LevelDB&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;https://github.com/facebook/rocksdb&quot;&gt;RocksDB(基于LevelDB)&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;操作系统
    &lt;ul&gt;
      &lt;li&gt;开发环境
        &lt;ul&gt;
          &lt;li&gt;Windows&lt;/li&gt;
          &lt;li&gt;MacOS&lt;/li&gt;
          &lt;li&gt;Linux
            &lt;ul&gt;
              &lt;li&gt;&lt;a href=&quot;https://ubuntu.com/&quot;&gt;Ubuntu&lt;/a&gt;&lt;/li&gt;
              &lt;li&gt;&lt;a href=&quot;https://www.kali.org/docs/&quot;&gt;Kali 侧重于Web安全&lt;/a&gt;&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;部署环境(不仅限于此)
        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;https://ubuntu.com/&quot;&gt;Ubuntu server&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;https://www.centos.org/&quot;&gt;CentOS&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;https://www.debian.org/&quot;&gt;Deban&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;&quot;&gt;Unix&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Sat, 01 Jan 2022 09:00:00 +0800</pubDate>
        <link>http://www.louishwh.top/2022/01/01/%E6%9C%8D%E5%8A%A1%E7%AB%AF%E6%8A%80%E8%83%BD%E7%82%B9/</link>
        <guid isPermaLink="true">http://www.louishwh.top/2022/01/01/%E6%9C%8D%E5%8A%A1%E7%AB%AF%E6%8A%80%E8%83%BD%E7%82%B9/</guid>
        
        <category>总结</category>
        
        
        <category>服务端</category>
        
      </item>
    
      <item>
        <title>年终总结和未来期许</title>
        <description>
</description>
        <pubDate>Fri, 31 Dec 2021 00:00:00 +0800</pubDate>
        <link>http://www.louishwh.top/2021/12/31/%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93%E5%92%8C%E6%9C%AA%E6%9D%A5%E6%9C%9F%E8%AE%B8/</link>
        <guid isPermaLink="true">http://www.louishwh.top/2021/12/31/%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93%E5%92%8C%E6%9C%AA%E6%9D%A5%E6%9C%9F%E8%AE%B8/</guid>
        
        
      </item>
    
      <item>
        <title>架构_Web架构总结</title>
        <description>
</description>
        <pubDate>Wed, 29 Dec 2021 21:00:00 +0800</pubDate>
        <link>http://www.louishwh.top/2021/12/29/%E6%9E%B6%E6%9E%84-Web%E6%80%BB%E7%BB%93/</link>
        <guid isPermaLink="true">http://www.louishwh.top/2021/12/29/%E6%9E%B6%E6%9E%84-Web%E6%80%BB%E7%BB%93/</guid>
        
        <category>架构</category>
        
        
        <category>服务端</category>
        
      </item>
    
      <item>
        <title>架构_Web高安全架构</title>
        <description>&lt;h2 id=&quot;零-核心问题&quot;&gt;零. 核心问题&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;什么是安全性？
    &lt;ul&gt;
      &lt;li&gt;系统不被入侵&lt;/li&gt;
      &lt;li&gt;用户数据不被泄漏&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;有哪些攻击，如何防范？
    &lt;ul&gt;
      &lt;li&gt;攻击手段
        &lt;ul&gt;
          &lt;li&gt;XSS工具&lt;/li&gt;
          &lt;li&gt;注入攻击&lt;/li&gt;
          &lt;li&gt;CSRF攻击&lt;/li&gt;
          &lt;li&gt;其他攻击&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;防御与检测手段
        &lt;ul&gt;
          &lt;li&gt;防火墙&lt;/li&gt;
          &lt;li&gt;网站漏洞扫描&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;一-常见的攻击和防御手段&quot;&gt;一. 常见的攻击和防御手段&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;XSS攻击（Cross Site Script）
    &lt;ul&gt;
      &lt;li&gt;手段
        &lt;ul&gt;
          &lt;li&gt;提交含有恶意的脚本，包含在正常的页面中&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;防范
        &lt;ol&gt;
          &lt;li&gt;消毒:对用户输入进行过滤和转译&lt;/li&gt;
          &lt;li&gt;HttpOnly:禁止JS访问担忧HttpOnly属性的Cookie&lt;/li&gt;
        &lt;/ol&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;注入攻击
    &lt;ol&gt;
      &lt;li&gt;SQL注入
        &lt;ul&gt;
          &lt;li&gt;防范
            &lt;ol&gt;
              &lt;li&gt;消毒&lt;/li&gt;
              &lt;li&gt;参数绑定&lt;/li&gt;
            &lt;/ol&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;OS注入
        &lt;ul&gt;
          &lt;li&gt;定义
            &lt;ul&gt;
              &lt;li&gt;利系统漏洞在运行应用程序的服务器上执行任意操作系统命令&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;防范
            &lt;ol&gt;
              &lt;li&gt;用最小权限去运行程序&lt;/li&gt;
              &lt;li&gt;减少被攻击面：尽可能避免外部数据操控&lt;/li&gt;
            &lt;/ol&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;CSRF攻击
        &lt;ul&gt;
          &lt;li&gt;定义
            &lt;ul&gt;
              &lt;li&gt;通过跨站请求，以合法用户的身份进行非法操作&lt;/li&gt;
              &lt;li&gt;利用浏览器的Cookie或服务器Session策略盗取用户身份&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;防范
            &lt;ol&gt;
              &lt;li&gt;表单Token&lt;/li&gt;
              &lt;li&gt;验证码&lt;/li&gt;
              &lt;li&gt;Referer check&lt;/li&gt;
            &lt;/ol&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;其他的攻击和漏洞
        &lt;ol&gt;
          &lt;li&gt;Error Code&lt;/li&gt;
          &lt;li&gt;HTML注释&lt;/li&gt;
          &lt;li&gt;文件上传&lt;/li&gt;
          &lt;li&gt;路径遍历
            &lt;ul&gt;
              &lt;li&gt;定义
                &lt;ul&gt;
                  &lt;li&gt;在请求的URL中使用相对路径，遍历系统为开放的目录和文件&lt;/li&gt;
                &lt;/ul&gt;
              &lt;/li&gt;
              &lt;li&gt;防范
                &lt;ul&gt;
                  &lt;li&gt;将JS、CSS等资源文件部署在独立服务器、使用独立域名&lt;/li&gt;
                &lt;/ul&gt;
              &lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ol&gt;
      &lt;/li&gt;
      &lt;li&gt;Web应用防火墙
        &lt;ul&gt;
          &lt;li&gt;ModeSecurity&lt;/li&gt;
          &lt;li&gt;SiteShell&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Web安全漏洞扫描
        &lt;ul&gt;
          &lt;li&gt;查漏补缺&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;二-信息加密技术及密钥安全管理&quot;&gt;二. 信息加密技术及密钥安全管理&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;单向散列加密
    &lt;ul&gt;
      &lt;li&gt;定义
        &lt;ul&gt;
          &lt;li&gt;通过对不同输入的不同长度的信息做散列计算，得到固定长度的输出&lt;/li&gt;
          &lt;li&gt;计算的过程时单向的，不能通过固定长度的输出计算出输入信息&lt;/li&gt;
          &lt;li&gt;输入的任何细微变化都会导致输出的完全不同&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;作用
        &lt;ul&gt;
          &lt;li&gt;密码加密保护&lt;/li&gt;
          &lt;li&gt;生成信息摘要&lt;/li&gt;
          &lt;li&gt;计算具有高离散程度的随机数&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;常用算法
        &lt;ul&gt;
          &lt;li&gt;MD5&lt;/li&gt;
          &lt;li&gt;SHA&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;常用的操作
        &lt;ul&gt;
          &lt;li&gt;加盐&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;破解的手段
        &lt;ul&gt;
          &lt;li&gt;彩虹表&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;对称加密
    &lt;ul&gt;
      &lt;li&gt;定义
        &lt;ul&gt;
          &lt;li&gt;加密和解密使用同一个密钥&lt;/li&gt;
          &lt;li&gt;明文 + 密钥 + 加密算法 -&amp;gt; 密文&lt;/li&gt;
          &lt;li&gt;密文 + 密钥 + 解密算法 -&amp;gt; 明文&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;优点
        &lt;ul&gt;
          &lt;li&gt;效率高，适合大量数据加密&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;缺点
        &lt;ul&gt;
          &lt;li&gt;要使用同一个密钥，不方便远程通信&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;常用算法
        &lt;ul&gt;
          &lt;li&gt;DES&lt;/li&gt;
          &lt;li&gt;RC&lt;/li&gt;
          &lt;li&gt;AES&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;非对称加密
    &lt;ul&gt;
      &lt;li&gt;定义
        &lt;ul&gt;
          &lt;li&gt;A公钥 + A私钥&lt;/li&gt;
          &lt;li&gt;B公钥 + B私钥&lt;/li&gt;
          &lt;li&gt;明文 + B公钥 + 加密算法 -&amp;gt; 密文&lt;/li&gt;
          &lt;li&gt;密文 + B私钥 + 解开算法 -&amp;gt; 明文&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;作用
        &lt;ul&gt;
          &lt;li&gt;信息安全传输&lt;/li&gt;
          &lt;li&gt;数字签名&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;优点
        &lt;ul&gt;
          &lt;li&gt;能够实现非安全传输通道的信息传输&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;缺点
        &lt;ul&gt;
          &lt;li&gt;比较耗费性能，通常与对称加密结合使用&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;常用算法
        &lt;ul&gt;
          &lt;li&gt;RSA&lt;/li&gt;
          &lt;li&gt;ECC&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;密钥安全管理
    &lt;ul&gt;
      &lt;li&gt;方案一
        &lt;ul&gt;
          &lt;li&gt;算法+密钥+独立服务器方案&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;方案二
        &lt;ul&gt;
          &lt;li&gt;算法 + 应用系统&lt;/li&gt;
          &lt;li&gt;密钥 + 独立服务器&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;核心理念
        &lt;ul&gt;
          &lt;li&gt;每个服务器专人负责管理&lt;/li&gt;
          &lt;li&gt;没人能查看完整的密钥信息&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;三-信息过滤与反垃圾&quot;&gt;三. 信息过滤与反垃圾&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;文本匹配
    &lt;ul&gt;
      &lt;li&gt;Tire算法&lt;/li&gt;
      &lt;li&gt;多级Hash表&lt;/li&gt;
      &lt;li&gt;降噪预处理&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;分类算法
    &lt;ul&gt;
      &lt;li&gt;贝叶斯分类算法&lt;/li&gt;
      &lt;li&gt;TAN算法&lt;/li&gt;
      &lt;li&gt;ARCS算法&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;黑名单
    &lt;ul&gt;
      &lt;li&gt;布隆过滤器&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;四-电子商务风险控制&quot;&gt;四. 电子商务风险控制&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;风险
    &lt;ul&gt;
      &lt;li&gt;账户风险
        &lt;ul&gt;
          &lt;li&gt;账户被盗用&lt;/li&gt;
          &lt;li&gt;恶意注册&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;买家风险
        &lt;ul&gt;
          &lt;li&gt;恶意下单占库存&lt;/li&gt;
          &lt;li&gt;黄牛抢购&lt;/li&gt;
          &lt;li&gt;欺诈退款&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;卖家风险
        &lt;ul&gt;
          &lt;li&gt;欺诈&lt;/li&gt;
          &lt;li&gt;违禁&lt;/li&gt;
          &lt;li&gt;侵权&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;风控
    &lt;ul&gt;
      &lt;li&gt;规则引擎
        &lt;ul&gt;
          &lt;li&gt;将业务规则和规则处理逻辑分离&lt;/li&gt;
          &lt;li&gt;业务规则有运营人员编辑，实时更新&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;统计模型
        &lt;ul&gt;
          &lt;li&gt;训练分类算法/机器学习算法&lt;/li&gt;
          &lt;li&gt;通过模型模糊识别&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;五-总结&quot;&gt;五. 总结&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;世界没有绝对的安全&lt;/li&gt;
  &lt;li&gt;网站通过提高攻击的门槛来实现&lt;/li&gt;
  &lt;li&gt;理性上，使攻击者的攻击收益远小于付出&lt;/li&gt;
&lt;/ol&gt;

</description>
        <pubDate>Mon, 27 Dec 2021 21:00:00 +0800</pubDate>
        <link>http://www.louishwh.top/2021/12/27/%E6%9E%B6%E6%9E%84-Web%E9%AB%98%E5%AE%89%E5%85%A8%E6%9E%B6%E6%9E%84/</link>
        <guid isPermaLink="true">http://www.louishwh.top/2021/12/27/%E6%9E%B6%E6%9E%84-Web%E9%AB%98%E5%AE%89%E5%85%A8%E6%9E%B6%E6%9E%84/</guid>
        
        <category>架构</category>
        
        
        <category>服务端</category>
        
      </item>
    
      <item>
        <title>架构_Web可拓展架构</title>
        <description>&lt;h2 id=&quot;零-核心问题&quot;&gt;零. 核心问题&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;什么是可拓展性？
    &lt;ul&gt;
      &lt;li&gt;对现有系统影响最小的情况下，系统功能可持续拓展和提升的能力&lt;/li&gt;
      &lt;li&gt;当系统增加新功能时，不需要对现有系统的结构和代码进行修改&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;如何实现可拓展性？
    &lt;ul&gt;
      &lt;li&gt;系统架构设计层面的开闭原则&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;一-构建可拓展的网站架构&quot;&gt;一. 构建可拓展的网站架构&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;低耦合
    &lt;ul&gt;
      &lt;li&gt;作用
        &lt;ul&gt;
          &lt;li&gt;系统更容易拓展&lt;/li&gt;
          &lt;li&gt;模块更容易复用&lt;/li&gt;
          &lt;li&gt;让开发过程和维护变得更加轻松和容易管理&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;将一个大系统切分为N个低耦合的子模块
        &lt;ul&gt;
          &lt;li&gt;包含横向的业务模块&lt;/li&gt;
          &lt;li&gt;包含纵向的基础技术模块&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;对架构师的要求
        &lt;ul&gt;
          &lt;li&gt;专业的技术和经验&lt;/li&gt;
          &lt;li&gt;对业务场景的理解&lt;/li&gt;
          &lt;li&gt;对人性的把握、对世界的认知&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;模块化
    &lt;ul&gt;
      &lt;li&gt;作用
        &lt;ul&gt;
          &lt;li&gt;一组功能的集合&lt;/li&gt;
          &lt;li&gt;提高系统的复用程度&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;二-利用分布式消息队列降低系统耦合性&quot;&gt;二. 利用分布式消息队列降低系统耦合性&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;事件驱动架构
    &lt;ul&gt;
      &lt;li&gt;定义：
        &lt;ul&gt;
          &lt;li&gt;在低耦合的模块之间传输事件消息，保持模块的松散耦合，并借助事件消息的通信完成模块间合作&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;典型实例
        &lt;ul&gt;
          &lt;li&gt;生产者-消费者模式&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;在大型网站中的使用
        &lt;ul&gt;
          &lt;li&gt;分布式消息队列&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;分布式消息队列
    &lt;ul&gt;
      &lt;li&gt;定义
        &lt;ul&gt;
          &lt;li&gt;先进先出的数据结构&lt;/li&gt;
          &lt;li&gt;应用程序通过远程访问接口使用分布式消息队列，对消息存取操作&lt;/li&gt;
          &lt;li&gt;实现分布式的异步调用&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;作用
        &lt;ul&gt;
          &lt;li&gt;伸缩性：类似无状态的服务器，扩容简单&lt;/li&gt;
          &lt;li&gt;可用性：内存队列、磁盘存储、分布式&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;具体的方案
        &lt;ul&gt;
          &lt;li&gt;MySQL&lt;/li&gt;
          &lt;li&gt;ActiveMQ&lt;/li&gt;
          &lt;li&gt;RocketMQ&lt;/li&gt;
          &lt;li&gt;Kafka&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;三-利用分布式服务构建可复用的业务平台&quot;&gt;三. 利用分布式服务构建可复用的业务平台&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;常见问题及方案
    &lt;ol&gt;
      &lt;li&gt;大型系统面临的问题
        &lt;ol&gt;
          &lt;li&gt;编译、部署困难&lt;/li&gt;
          &lt;li&gt;代码分支管理困难&lt;/li&gt;
          &lt;li&gt;数据库连接耗尽&lt;/li&gt;
          &lt;li&gt;新增业务困难&lt;/li&gt;
        &lt;/ol&gt;
      &lt;/li&gt;
      &lt;li&gt;解决方案
        &lt;ol&gt;
          &lt;li&gt;横向拆分
            &lt;ul&gt;
              &lt;li&gt;复用的业务拆分出来，独立部署
                &lt;ul&gt;
                  &lt;li&gt;新增业务只需要调用分布式服务，不依赖具体的模块代码&lt;/li&gt;
                  &lt;li&gt;模块只要保证接口一致&lt;/li&gt;
                &lt;/ul&gt;
              &lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;纵向拆分
            &lt;ul&gt;
              &lt;li&gt;梳理业务&lt;/li&gt;
              &lt;li&gt;剥离业务&lt;/li&gt;
              &lt;li&gt;独立Web应用&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ol&gt;
      &lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;WebService
    &lt;ol&gt;
      &lt;li&gt;Service Broker + UDDI&lt;/li&gt;
      &lt;li&gt;Service Provider + WSDL&lt;/li&gt;
      &lt;li&gt;Service Requester + SOAP&lt;/li&gt;
      &lt;li&gt;缺点
        &lt;ol&gt;
          &lt;li&gt;臃肿的注册与发现机制&lt;/li&gt;
          &lt;li&gt;低效的XML序列化手段&lt;/li&gt;
          &lt;li&gt;开销较高的HTTP远程通信&lt;/li&gt;
          &lt;li&gt;复杂的部署与维护手段&lt;/li&gt;
        &lt;/ol&gt;
      &lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;大型网站分布式服务的需求与特点
    &lt;ol&gt;
      &lt;li&gt;负载均衡&lt;/li&gt;
      &lt;li&gt;失效转移&lt;/li&gt;
      &lt;li&gt;高效的远程通信&lt;/li&gt;
      &lt;li&gt;整合异构系统&lt;/li&gt;
      &lt;li&gt;对应用最少的侵入&lt;/li&gt;
      &lt;li&gt;版本控制&lt;/li&gt;
      &lt;li&gt;实时监控&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;分布式服务框架设计
    &lt;ul&gt;
      &lt;li&gt;SOA(Service Oriented Architecture)
        &lt;ul&gt;
          &lt;li&gt;Thrift&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;开源实例
        &lt;ul&gt;
          &lt;li&gt;Dubbo&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;四-可拓展的数据结构&quot;&gt;四. 可拓展的数据结构&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;五-利用开发平台建设网站生态圈&quot;&gt;五. 利用开发平台建设网站生态圈&lt;/h2&gt;

</description>
        <pubDate>Fri, 24 Dec 2021 21:00:00 +0800</pubDate>
        <link>http://www.louishwh.top/2021/12/24/%E6%9E%B6%E6%9E%84-Web%E5%8F%AF%E6%8B%93%E5%B1%95%E6%9E%B6%E6%9E%84/</link>
        <guid isPermaLink="true">http://www.louishwh.top/2021/12/24/%E6%9E%B6%E6%9E%84-Web%E5%8F%AF%E6%8B%93%E5%B1%95%E6%9E%B6%E6%9E%84/</guid>
        
        <category>架构</category>
        
        
        <category>服务端</category>
        
      </item>
    
      <item>
        <title>架构_Web高伸缩架构</title>
        <description>&lt;h2 id=&quot;零-核心问题&quot;&gt;零. 核心问题&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;什么是高伸缩性？
    &lt;ul&gt;
      &lt;li&gt;仅通过改变部署的服务器数量就可以扩大或缩小网站的处理能力&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;如何实现高伸缩性？
    &lt;ul&gt;
      &lt;li&gt;功能物理分离&lt;/li&gt;
      &lt;li&gt;集群
        &lt;ul&gt;
          &lt;li&gt;应用服务器集群&lt;/li&gt;
          &lt;li&gt;数据服务器集群&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;一-伸缩性设计&quot;&gt;一. 伸缩性设计&lt;/h2&gt;
&lt;hr /&gt;

&lt;h4 id=&quot;网站架构伸缩性设计&quot;&gt;网站架构伸缩性设计&lt;/h4&gt;

&lt;ol&gt;
  &lt;li&gt;不同功能进行物理分离实现伸缩
    &lt;ul&gt;
      &lt;li&gt;纵向分离
        &lt;ul&gt;
          &lt;li&gt;将业务处理流程上的不同部分分离部署，实现系统伸缩性&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;横向分离
        &lt;ul&gt;
          &lt;li&gt;将不同的业务员模块分离部署，实现系统伸缩性&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;单一功能通过集群规模实现伸缩
    &lt;ul&gt;
      &lt;li&gt;应用服务器集群&lt;/li&gt;
      &lt;li&gt;数据服务器集群
        &lt;ul&gt;
          &lt;li&gt;缓存数据服务器集群&lt;/li&gt;
          &lt;li&gt;存储数据服务器集群&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;二-服务器集群的伸缩性设计&quot;&gt;二. 服务器集群的伸缩性设计&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;HTTP重定向负载均衡
    &lt;ul&gt;
      &lt;li&gt;利用HTTP重定向协议实现负载均衡&lt;/li&gt;
      &lt;li&gt;优点
        &lt;ul&gt;
          &lt;li&gt;简单&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;缺点
        &lt;ul&gt;
          &lt;li&gt;浏览器需要请求两次服务器才能完成一次访问&lt;/li&gt;
          &lt;li&gt;重定向服务器可能成为瓶颈&lt;/li&gt;
          &lt;li&gt;重定向可能被搜索引擎判断为SEO作弊&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;DNS域名解析负载均衡
    &lt;ul&gt;
      &lt;li&gt;域名解请求会根据负载均衡算法计算出一个不同的IP地址返回&lt;/li&gt;
      &lt;li&gt;优点
        &lt;ul&gt;
          &lt;li&gt;省掉了网站管理维护负载均衡服务器&lt;/li&gt;
          &lt;li&gt;可以将域名解析成距离用户地理最近的一个服务器地址&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;缺点
        &lt;ul&gt;
          &lt;li&gt;由于DNS的多级缓存，导致修改后生效事件较长&lt;/li&gt;
          &lt;li&gt;DNS负载均衡控制权在域名服务那里，网站无法对其作更多的改善&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;反向代理负载均衡
    &lt;ul&gt;
      &lt;li&gt;在HTTP协议层面转发请求，应用层负载均衡&lt;/li&gt;
      &lt;li&gt;优点
        &lt;ul&gt;
          &lt;li&gt;部署简单&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;缺点
        &lt;ul&gt;
          &lt;li&gt;性能可能成为瓶颈&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;IP负载均衡
    &lt;ul&gt;
      &lt;li&gt;在网络层通过修改目标地址进行负载均衡&lt;/li&gt;
      &lt;li&gt;优点
        &lt;ul&gt;
          &lt;li&gt;IP负载均衡在内核进程完成数据分发，较反向发力负载均衡有更好的处理性能&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;缺点
        &lt;ul&gt;
          &lt;li&gt;集群的最大响应数据吞吐量受制于负载均衡服务器的网卡带宽&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;数据链路层负载均衡
    &lt;ul&gt;
      &lt;li&gt;三角传输模式&lt;/li&gt;
      &lt;li&gt;负载均衡数据分发过程中不修改IP地址，只修改目的mac地址&lt;/li&gt;
      &lt;li&gt;目前使用最广的负载均衡手段&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;负载均衡算法
    &lt;ul&gt;
      &lt;li&gt;轮询（Round Robin）&lt;/li&gt;
      &lt;li&gt;加权轮询（Weighted Round Robin）&lt;/li&gt;
      &lt;li&gt;随机（Random）&lt;/li&gt;
      &lt;li&gt;最少连接（Least Connections）&lt;/li&gt;
      &lt;li&gt;源地址散列（Source Hashing）
        &lt;ul&gt;
          &lt;li&gt;对IP做Hash计算，得到应用服务器，实现同一个请求总在同一个服务器上处理&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;三-分布式缓存集群的伸缩性设计&quot;&gt;三. 分布式缓存集群的伸缩性设计&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;Memcached分布式缓存集群的访问模型
    &lt;ul&gt;
      &lt;li&gt;应用程序 -&amp;gt; Memcached API&lt;/li&gt;
      &lt;li&gt;Memcached API -&amp;gt; 通信模块 -&amp;gt; Memcached服务器&lt;/li&gt;
      &lt;li&gt;Memcached API -&amp;gt; 路由算法 -&amp;gt; 服务器列表&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Memcached分布式缓存集群的伸缩性挑战
    &lt;ul&gt;
      &lt;li&gt;扩容&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;分布式缓存的一致性Hash算法
    &lt;ul&gt;
      &lt;li&gt;一致性Hash环&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;四-数据存储服务器集群的伸缩性设计&quot;&gt;四. 数据存储服务器集群的伸缩性设计&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;关系数据库集群的伸缩性设计
    &lt;ul&gt;
      &lt;li&gt;主从读写分离&lt;/li&gt;
      &lt;li&gt;分库分表&lt;/li&gt;
      &lt;li&gt;分片
        &lt;ul&gt;
          &lt;li&gt;Amoeba&lt;/li&gt;
          &lt;li&gt;Cobar&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;NoSQL数据库的伸缩性设计
    &lt;ul&gt;
      &lt;li&gt;HBase&lt;/li&gt;
      &lt;li&gt;Redis&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;五-总结&quot;&gt;五. 总结&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;伸缩架构本身的设计是简单的&lt;/li&gt;
  &lt;li&gt;当与可用性、正确性、性能等耦合到一起，伸缩性就复杂了&lt;/li&gt;
  &lt;li&gt;综合考虑团队的知识储备和结构、管理层的战略愿景和规划&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;六-tips&quot;&gt;六. Tips&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;只有遇不到的问题，没有解决不了的问题&lt;/li&gt;
  &lt;li&gt;高手之所以是高手，因为遇到了棘手的问题，并解决了&lt;/li&gt;
&lt;/ol&gt;

</description>
        <pubDate>Tue, 21 Dec 2021 21:00:00 +0800</pubDate>
        <link>http://www.louishwh.top/2021/12/21/%E6%9E%B6%E6%9E%84-Web%E9%AB%98%E4%BC%B8%E7%BC%A9%E6%9E%B6%E6%9E%84/</link>
        <guid isPermaLink="true">http://www.louishwh.top/2021/12/21/%E6%9E%B6%E6%9E%84-Web%E9%AB%98%E4%BC%B8%E7%BC%A9%E6%9E%B6%E6%9E%84/</guid>
        
        <category>架构</category>
        
        
        <category>服务端</category>
        
      </item>
    
      <item>
        <title>架构_Web高可用架构</title>
        <description>&lt;h2 id=&quot;零-核心问题&quot;&gt;零. 核心问题&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;网站可用性如何衡量？
    &lt;ul&gt;
      &lt;li&gt;指标&lt;/li&gt;
      &lt;li&gt;考核&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;如何设计高可用的系统？
    &lt;ul&gt;
      &lt;li&gt;冗余&lt;/li&gt;
      &lt;li&gt;失效转移&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;一-网站可用性的衡量&quot;&gt;一. 网站可用性的衡量&lt;/h2&gt;
&lt;hr /&gt;

&lt;h4 id=&quot;1-可用性度量&quot;&gt;1. 可用性度量&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;9的多少数量来衡量
    &lt;ul&gt;
      &lt;li&gt;90% 小于36天12小时&lt;/li&gt;
      &lt;li&gt;99% 小于87小时36分钟&lt;/li&gt;
      &lt;li&gt;99.9% 小于8小时46分钟&lt;/li&gt;
      &lt;li&gt;99.99% 小于52分钟33秒&lt;/li&gt;
      &lt;li&gt;99.999% 小于5分钟15秒&lt;/li&gt;
      &lt;li&gt;99.9999% 小于31.5秒&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;
&lt;h4 id=&quot;2-可用性考核&quot;&gt;2. 可用性考核&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;数据和服务的冗余备份&lt;/li&gt;
  &lt;li&gt;数据和服务的失效转移&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;二-高可用的应用&quot;&gt;二. 高可用的应用&lt;/h2&gt;

&lt;hr /&gt;
&lt;h4 id=&quot;1-负载均衡进行无状态服务的失效转移&quot;&gt;1. 负载均衡进行无状态服务的失效转移&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;无状态，实现所有服务器完全对等&lt;/li&gt;
  &lt;li&gt;失效转移，某一个出现问题能够及时剔除&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;
&lt;h4 id=&quot;2-应用服务器集群的session管理&quot;&gt;2. 应用服务器集群的Session管理&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;业务总是有状态的&lt;/li&gt;
  &lt;li&gt;Session,多次请求使用的上下文对象
    &lt;ol&gt;
      &lt;li&gt;Session复制
   	- 每台都备份一份
   		- 空间/带宽浪费较多&lt;/li&gt;
      &lt;li&gt;Session绑定
   	- 通过负载均衡将请求分发到同一台服务器
   	- 一旦宕机就会导致无法完成业务处理&lt;/li&gt;
      &lt;li&gt;利用Cookie存储Session
   	- Cookie大小受限
   	- 传输耗费性能
   	- 浏览区关闭Cookie会导致不可用&lt;/li&gt;
      &lt;li&gt;Session服务器
   	- Session服务集群统一管理Session&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;三-高可用的服务&quot;&gt;三. 高可用的服务&lt;/h2&gt;

&lt;hr /&gt;
&lt;h4 id=&quot;1-分级管理&quot;&gt;1. 分级管理&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;服务分级管理
    &lt;ul&gt;
      &lt;li&gt;核心应用和服务使用更好的配置&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;服务部署隔离
    &lt;ul&gt;
      &lt;li&gt;避免故障的连锁反应&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;
&lt;h4 id=&quot;2-超时设置&quot;&gt;2. 超时设置&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;由于服务失去响应导致用户请求长时间得不到响应
    &lt;ul&gt;
      &lt;li&gt;占用资源&lt;/li&gt;
      &lt;li&gt;设置超时时间及时释放资源&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;
&lt;h4 id=&quot;3-异步调用&quot;&gt;3. 异步调用&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;通过消息队列等异步方式，避免一个服务失败导致整个过程失败
    &lt;ul&gt;
      &lt;li&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;
&lt;h4 id=&quot;4-服务降级&quot;&gt;4. 服务降级&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;访问高峰，服务因大量并发而性能下降，为保证核心应用和功能的正常运行
    &lt;ul&gt;
      &lt;li&gt;拒绝服务
        &lt;ul&gt;
          &lt;li&gt;拒绝低优先级应用的调用&lt;/li&gt;
          &lt;li&gt;减少服务调用并发数&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;关闭功能
        &lt;ul&gt;
          &lt;li&gt;关闭部分不重要的服务&lt;/li&gt;
          &lt;li&gt;节约系统开销，为重要的服务和功能让出资源&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;
&lt;h4 id=&quot;5-幂等性设计&quot;&gt;5. 幂等性设计&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;服务重复调用和调用一次产生的结果相同
    &lt;ul&gt;
      &lt;li&gt;解决服务重复调用问题&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;四-高可用的数据&quot;&gt;四. 高可用的数据&lt;/h2&gt;

&lt;hr /&gt;
&lt;h4 id=&quot;1-cap原理&quot;&gt;1. CAP原理&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;C: Consistency（数据一致性）
    &lt;ul&gt;
      &lt;li&gt;多份副本数据不一致&lt;/li&gt;
      &lt;li&gt;所有程序都能访问得到相同的数据&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;A: Availability（数据可用性）
    &lt;ul&gt;
      &lt;li&gt;多份副本其中某个损坏，需要将访问切换到可用的副本上&lt;/li&gt;
      &lt;li&gt;任何时候程序能都可与读写访问&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;P: Partition Tolerance（分区耐受性）
    &lt;ul&gt;
      &lt;li&gt;系统可以跨网络分区线性伸缩&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;大型网站通常选择AP,一定程度上放弃C
    &lt;ul&gt;
      &lt;li&gt;数据强一致性
        &lt;ul&gt;
          &lt;li&gt;各个副本的数据在物理存储中总是一致&lt;/li&gt;
          &lt;li&gt;数据更新操作结果操作响应总是一致，不处于不确定状态&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;数据用户一致
        &lt;ul&gt;
          &lt;li&gt;各个副本的数据在物理存储中可能不一致&lt;/li&gt;
          &lt;li&gt;终端用户访问，通过纠错和教研机制，可以确定一个一致且正确的数据&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;数据最终一致
        &lt;ul&gt;
          &lt;li&gt;各个副本的数据在物理存储中可能不一致&lt;/li&gt;
          &lt;li&gt;终端用户访问，可能不一致&lt;/li&gt;
          &lt;li&gt;但是经过一段时间的自我恢复和修正，数据最终会达成一致&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;
&lt;h4 id=&quot;2-数据备份&quot;&gt;2. 数据备份&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;冷备份
    &lt;ul&gt;
      &lt;li&gt;缺点
        &lt;ul&gt;
          &lt;li&gt;不能保证数据一致性&lt;/li&gt;
          &lt;li&gt;备份结束时间后更新的数据会丢失&lt;/li&gt;
          &lt;li&gt;不能保证可用性，恢复时间较长&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;优点
        &lt;ul&gt;
          &lt;li&gt;可靠性高，有效&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;热备份
    &lt;ul&gt;
      &lt;li&gt;异步热备
        &lt;ul&gt;
          &lt;li&gt;操作成功保证写入一个成功，其他副本的写入异步完成&lt;/li&gt;
          &lt;li&gt;分为主存储服务器和从服务器&lt;/li&gt;
          &lt;li&gt;正常情况下只连接主存储器&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;同步热备
        &lt;ul&gt;
          &lt;li&gt;多分数据副本的写入操作同步完成&lt;/li&gt;
          &lt;li&gt;存储服务器没有主从之分&lt;/li&gt;
          &lt;li&gt;性能由最慢那台决定&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;实践中通常做法
        &lt;ul&gt;
          &lt;li&gt;写操作只访问Master数据库&lt;/li&gt;
          &lt;li&gt;读操作只访问Slave数据库&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;
&lt;h4 id=&quot;3-失效转移&quot;&gt;3. 失效转移&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;失效确认
    &lt;ul&gt;
      &lt;li&gt;心跳检测&lt;/li&gt;
      &lt;li&gt;访问失败报告&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;访问转移
    &lt;ul&gt;
      &lt;li&gt;对等服务器&lt;/li&gt;
      &lt;li&gt;不对等服务器&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;数据恢复
    &lt;ul&gt;
      &lt;li&gt;部分服务宕机时，数据存储的副本减少，必须将副本的数量恢复到系统设定的值&lt;/li&gt;
      &lt;li&gt;系统从正常的服务复制数据&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;五-高可用软件质量保证&quot;&gt;五. 高可用软件质量保证&lt;/h2&gt;
&lt;hr /&gt;
&lt;h4 id=&quot;1-网站发布&quot;&gt;1. 网站发布&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;关闭服务器集群中的一小部分&lt;/li&gt;
  &lt;li&gt;发布过的服务可以立即访问&lt;/li&gt;
  &lt;li&gt;整个发布过程不影响用户使用&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;
&lt;h4 id=&quot;2-自动化测试&quot;&gt;2. 自动化测试&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;Selenium
    &lt;ul&gt;
      &lt;li&gt;功能测试&lt;/li&gt;
      &lt;li&gt;浏览器兼容测试&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;
&lt;h4 id=&quot;3-预发布验证&quot;&gt;3. 预发布验证&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;避免环境不一致导致上线异常&lt;/li&gt;
  &lt;li&gt;通过预发布服务器进行预发布验证&lt;/li&gt;
  &lt;li&gt;与线上的唯一不同是没有配置在负载均衡服务器上&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;
&lt;h4 id=&quot;4-代码控制&quot;&gt;4. 代码控制&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;主干开发，分支发布
    &lt;ul&gt;
      &lt;li&gt;主干代码反应目前整体应用的状态一目了然，便于管理和控制&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;分支开发，主干发布
    &lt;ul&gt;
      &lt;li&gt;当前主要使用的方式&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;
&lt;h4 id=&quot;5-自动化发布&quot;&gt;5. 自动化发布&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;基于规则驱动的流程&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;
&lt;h4 id=&quot;6-灰度发布ab测试&quot;&gt;6. 灰度发布（AB测试）&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;将服务器分成若干部分&lt;/li&gt;
  &lt;li&gt;每天只发布一部分服务器&lt;/li&gt;
  &lt;li&gt;观察运行稳定没有问题&lt;/li&gt;
  &lt;li&gt;如果发现问题回滚已发布的服务器&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;六-网站运行监控&quot;&gt;六. 网站运行监控&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;不允许没有监控的系统上线&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;
&lt;h4 id=&quot;1-监控数据采集&quot;&gt;1. 监控数据采集&lt;/h4&gt;
&lt;ol&gt;
  &lt;li&gt;用户行为日志收集
    &lt;ul&gt;
      &lt;li&gt;服务端日志&lt;/li&gt;
      &lt;li&gt;客户端日志&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;服务器性能监控
    &lt;ul&gt;
      &lt;li&gt;收集服务器性能指标&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;运行数据报告
    &lt;ul&gt;
      &lt;li&gt;监控具体业务场景相关的技术和业务
        &lt;ul&gt;
          &lt;li&gt;平均响应延迟时间&lt;/li&gt;
          &lt;li&gt;邮件数目&lt;/li&gt;
          &lt;li&gt;缓存命中率&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;hr /&gt;
&lt;h4 id=&quot;2-监控管理&quot;&gt;2. 监控管理&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;根据监控数据进行
    &lt;ul&gt;
      &lt;li&gt;风险预警&lt;/li&gt;
      &lt;li&gt;负载调整&lt;/li&gt;
      &lt;li&gt;最大化资源利用&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;ol&gt;
  &lt;li&gt;系统报警
    &lt;ul&gt;
      &lt;li&gt;配置警报阀值&lt;/li&gt;
      &lt;li&gt;设置警报系统&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;失效转移
    &lt;ul&gt;
      &lt;li&gt;警报系统通知应用进行失效转移&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;自动优雅降级
    &lt;ul&gt;
      &lt;li&gt;访问高峰时，主动关闭部分功能&lt;/li&gt;
      &lt;li&gt;确保资源用在核心功能的访问上&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;hr /&gt;
&lt;h2 id=&quot;总结&quot;&gt;总结&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;先求生存&lt;/li&gt;
  &lt;li&gt;再求发展&lt;/li&gt;
  &lt;li&gt;追求高概率稳定性&lt;/li&gt;
&lt;/ol&gt;

</description>
        <pubDate>Sat, 18 Dec 2021 21:00:00 +0800</pubDate>
        <link>http://www.louishwh.top/2021/12/18/%E6%9E%B6%E6%9E%84-Web%E9%AB%98%E5%8F%AF%E7%94%A8%E6%9E%B6%E6%9E%84/</link>
        <guid isPermaLink="true">http://www.louishwh.top/2021/12/18/%E6%9E%B6%E6%9E%84-Web%E9%AB%98%E5%8F%AF%E7%94%A8%E6%9E%B6%E6%9E%84/</guid>
        
        <category>架构</category>
        
        
        <category>服务端</category>
        
      </item>
    
      <item>
        <title>架构_Web高性能架构</title>
        <description>&lt;h2 id=&quot;零-核心问题&quot;&gt;零. 核心问题&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;网站的性能怎么评估？
    &lt;ul&gt;
      &lt;li&gt;用户/开发/运维&lt;/li&gt;
      &lt;li&gt;网站性能指标有哪些？&lt;/li&gt;
      &lt;li&gt;如何得到性能的指标？&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;网站的性能如何优化？
    &lt;ul&gt;
      &lt;li&gt;前端优化？&lt;/li&gt;
      &lt;li&gt;后端优化？&lt;/li&gt;
      &lt;li&gt;存储优化？&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;一-网站性能的评估&quot;&gt;一. 网站性能的评估&lt;/h2&gt;
&lt;hr /&gt;

&lt;h4 id=&quot;1-不同视角&quot;&gt;1. 不同视角&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;从用户：
    &lt;ol&gt;
      &lt;li&gt;加载出频率&lt;/li&gt;
      &lt;li&gt;加载的速度&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;从开发：
    &lt;ol&gt;
      &lt;li&gt;延迟&lt;/li&gt;
      &lt;li&gt;吞吐量&lt;/li&gt;
      &lt;li&gt;稳定性&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;从运维
    &lt;ol&gt;
      &lt;li&gt;硬件配置&lt;/li&gt;
      &lt;li&gt;网络架构&lt;/li&gt;
      &lt;li&gt;资源利用率：带宽/CPU/硬盘&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;
&lt;h4 id=&quot;2-具体的指标&quot;&gt;2. 具体的指标&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;响应时间（系统的快慢）
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://colin-scott.github.io/personal_website/research/interactive_latency.html&quot;&gt;应用执行一个操作的时间&lt;/a&gt;
        &lt;ul&gt;
          &lt;li&gt;打开网站 几秒&lt;/li&gt;
          &lt;li&gt;数据库查询有索引的数据 十几毫秒&lt;/li&gt;
          &lt;li&gt;机械硬盘一次寻址定位 几毫秒&lt;/li&gt;
          &lt;li&gt;从内存中读取1MB数据 几十微米&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;并发数（系统负载能力）
    &lt;ul&gt;
      &lt;li&gt;系统能够同时处理请求的数目
        &lt;ul&gt;
          &lt;li&gt;用户数 » 在线用户数 » 并发用户数&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;吞吐量（系统处理能力）
    &lt;ul&gt;
      &lt;li&gt;单位时间内系统处理的请求数量
        &lt;ul&gt;
          &lt;li&gt;TPS: 每秒事务数&lt;/li&gt;
          &lt;li&gt;QPS: 每秒查询数&lt;/li&gt;
          &lt;li&gt;HPS: 每秒请求数&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;性能计数器（操作系统/服务器性能的指标）
    &lt;ul&gt;
      &lt;li&gt;System Load（系统忙闲程度）
        &lt;ul&gt;
          &lt;li&gt;系统负载，正在被CPU和等待CPU执行的进程总数&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;对象与线程数&lt;/li&gt;
      &lt;li&gt;CPU使用&lt;/li&gt;
      &lt;li&gt;磁盘I/O&lt;/li&gt;
      &lt;li&gt;网络I/O&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;
&lt;h4 id=&quot;3-性能测试方法&quot;&gt;3. 性能测试方法&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;性能测试：
    &lt;ul&gt;
      &lt;li&gt;测试是否达到最初的设计目标&lt;/li&gt;
      &lt;li&gt;验证系统在资源可接受范围内能否达到性能预期&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;负载测试
    &lt;ul&gt;
      &lt;li&gt;对系统不断增加并发请求以增加系统压力，当系统的各项性能达到安全临界值&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;压力测试
    &lt;ul&gt;
      &lt;li&gt;获取系统的最大承受力&lt;/li&gt;
      &lt;li&gt;在超过安全负载情况下，对系统继续施加压力，直到系统崩溃&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;稳定性测试
    &lt;ul&gt;
      &lt;li&gt;在一定条件下，对系统加载一定的业务压力&lt;/li&gt;
      &lt;li&gt;使系统运行一段较长时间，以此检测系统是否稳定&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;性能测试报告
    &lt;ul&gt;
      &lt;li&gt;并发/响应/TPS/错误/Load/内存&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;二-网站性能的优化&quot;&gt;二. 网站性能的优化&lt;/h2&gt;
&lt;hr /&gt;

&lt;h4 id=&quot;1-前端性能优化&quot;&gt;1. 前端性能优化&lt;/h4&gt;
&lt;ol&gt;
  &lt;li&gt;浏览器访问优化
    &lt;ul&gt;
      &lt;li&gt;减少HTTP请求&lt;/li&gt;
      &lt;li&gt;使用浏览器缓存&lt;/li&gt;
      &lt;li&gt;启用压缩
        &lt;ul&gt;
          &lt;li&gt;压缩对于服务器和浏览器产生一定的压力&lt;/li&gt;
          &lt;li&gt;要权衡带宽和服务器资源&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;CSS居最上，JS居最下
        &lt;ul&gt;
          &lt;li&gt;CSS全部下载完才会对整个界面渲染&lt;/li&gt;
          &lt;li&gt;浏览器加载JS后立即执行，可能会阻塞界面&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;减少Cookie传输
        &lt;ul&gt;
          &lt;li&gt;太大的Cookie影响数据传输&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;CDN加速
    &lt;ul&gt;
      &lt;li&gt;Content Distribute Network&lt;/li&gt;
      &lt;li&gt;本质是将数据缓存中距离用户最近的地方&lt;/li&gt;
      &lt;li&gt;一般用于缓存静态资源：图片、文件、CSS、Script、静态网页&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;反向代理
    &lt;ul&gt;
      &lt;li&gt;将用户请求转发到Web服务器集群&lt;/li&gt;
      &lt;li&gt;可以通过配置缓存加速Web请求&lt;/li&gt;
      &lt;li&gt;实现负载均衡功能&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;hr /&gt;
&lt;h4 id=&quot;2-服务端性能优化&quot;&gt;2. 服务端性能优化&lt;/h4&gt;

&lt;ol&gt;
  &lt;li&gt;分布式缓存
    &lt;ul&gt;
      &lt;li&gt;缓存原理
        &lt;ul&gt;
          &lt;li&gt;网站优化优先考虑使用缓存&lt;/li&gt;
          &lt;li&gt;缓存主要用来存放读写比很高、很少变化的数据&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;合理使用缓存
        &lt;ul&gt;
          &lt;li&gt;不恰当使用缓存的情况
            &lt;ul&gt;
              &lt;li&gt;频繁修改的数据&lt;/li&gt;
              &lt;li&gt;没有热点的访问&lt;/li&gt;
              &lt;li&gt;数据不一致与脏读&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;几个重要概念
            &lt;ul&gt;
              &lt;li&gt;缓存雪崩
                &lt;ul&gt;
                  &lt;li&gt;大规模缓存失效，导致数据库会因为不能承受压力而宕机&lt;/li&gt;
                &lt;/ul&gt;
              &lt;/li&gt;
              &lt;li&gt;缓存预热：
                &lt;ul&gt;
                  &lt;li&gt;缓存系统重启时把热点数据加载好&lt;/li&gt;
                &lt;/ul&gt;
              &lt;/li&gt;
              &lt;li&gt;缓存穿透：
                &lt;ul&gt;
                  &lt;li&gt;请求不存在的数据，由于不存在缓存，对数据库造成很大压力&lt;/li&gt;
                &lt;/ul&gt;
              &lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;分布式缓存架构
        &lt;ul&gt;
          &lt;li&gt;Redis&lt;/li&gt;
          &lt;li&gt;Memcached&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;异步操作
    &lt;ul&gt;
      &lt;li&gt;消息队列
        &lt;ul&gt;
          &lt;li&gt;作用
            &lt;ul&gt;
              &lt;li&gt;削峰&lt;/li&gt;
              &lt;li&gt;改善性能&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;常见
            &lt;ul&gt;
              &lt;li&gt;Kafka&lt;/li&gt;
              &lt;li&gt;RocketMQ&lt;/li&gt;
              &lt;li&gt;RabbitMQ&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;使用集群
    &lt;ul&gt;
      &lt;li&gt;负载均衡为一个应用构建由多台服务器组成的服务器集群&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;代码优化
    &lt;ul&gt;
      &lt;li&gt;多线程
        &lt;ul&gt;
          &lt;li&gt;IO阻塞/多CPU&lt;/li&gt;
          &lt;li&gt;线程安全问题&lt;/li&gt;
          &lt;li&gt;最佳启动线程数与CPU内核数量成正比&lt;/li&gt;
          &lt;li&gt;最佳启动线程数与IO等待时间成正比&lt;/li&gt;
          &lt;li&gt;计算型任务，线程数最多不超过CPU内核数&lt;/li&gt;
          &lt;li&gt;任务需要等如磁盘操作、网络响应，启动多线程有助于提高任务&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;资源复用
        &lt;ul&gt;
          &lt;li&gt;单例&lt;/li&gt;
          &lt;li&gt;对象池&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;数据结构
        &lt;ul&gt;
          &lt;li&gt;这个重要性不多言&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;垃圾回收
        &lt;ul&gt;
          &lt;li&gt;JVM
            &lt;ul&gt;
              &lt;li&gt;heap&lt;/li&gt;
              &lt;li&gt;stack&lt;/li&gt;
              &lt;li&gt;Young Genetation&lt;/li&gt;
              &lt;li&gt;Old Genetation&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;hr /&gt;
&lt;h4 id=&quot;3-存储性能优化&quot;&gt;3. 存储性能优化&lt;/h4&gt;

&lt;ol&gt;
  &lt;li&gt;SSD - HHD
    &lt;ul&gt;
      &lt;li&gt;Solid State Drives&lt;/li&gt;
      &lt;li&gt;Hard Disk Drive&lt;/li&gt;
      &lt;li&gt;对比参数：
        &lt;ul&gt;
          &lt;li&gt;读取速度&lt;/li&gt;
          &lt;li&gt;抗震能力&lt;/li&gt;
          &lt;li&gt;功耗&lt;/li&gt;
          &lt;li&gt;噪声&lt;/li&gt;
          &lt;li&gt;容量&lt;/li&gt;
          &lt;li&gt;价格&lt;/li&gt;
          &lt;li&gt;写入次数&lt;/li&gt;
          &lt;li&gt;数据恢复&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;B+树 - LSM树
    &lt;ul&gt;
      &lt;li&gt;传统关系型数据库：B+树&lt;/li&gt;
      &lt;li&gt;LSM树可以看作是一个N阶合并树&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;RAID - HDFS
    &lt;ul&gt;
      &lt;li&gt;RAID: 廉价磁盘冗余阵列&lt;/li&gt;
      &lt;li&gt;HDFS: Hadoop分布式文件系统&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;hr /&gt;
&lt;h2 id=&quot;三-总结&quot;&gt;三. 总结&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;性能优化的最终目的就是改善用户的体验&lt;/li&gt;
  &lt;li&gt;性能优化也需要全面考虑
    &lt;ul&gt;
      &lt;li&gt;花费代价与获得的体验提升之间的平衡&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

</description>
        <pubDate>Wed, 15 Dec 2021 22:00:00 +0800</pubDate>
        <link>http://www.louishwh.top/2021/12/15/%E6%9E%B6%E6%9E%84-Web%E9%AB%98%E6%80%A7%E8%83%BD%E6%9E%B6%E6%9E%84/</link>
        <guid isPermaLink="true">http://www.louishwh.top/2021/12/15/%E6%9E%B6%E6%9E%84-Web%E9%AB%98%E6%80%A7%E8%83%BD%E6%9E%B6%E6%9E%84/</guid>
        
        <category>架构</category>
        
        
        <category>服务端</category>
        
      </item>
    
      <item>
        <title>架构_架构模式</title>
        <description>&lt;h3 id=&quot;对架构的几点思考&quot;&gt;对架构的几点思考&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;大型网站问题的缘由？
    &lt;ul&gt;
      &lt;li&gt;核心模型
        &lt;ul&gt;
          &lt;li&gt;客户端 –&amp;gt; 服务端&lt;/li&gt;
          &lt;li&gt;客户端 &amp;lt;– 服务端&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;问题点
        &lt;ul&gt;
          &lt;li&gt;客户端不断增长，甚至于可以达到亿级别&lt;/li&gt;
          &lt;li&gt;如果想要实现后端服务的正常，需要成比例增加服务端的处理能力&lt;/li&gt;
          &lt;li&gt;服务端的处理能力需要综合考量
            &lt;ul&gt;
              &lt;li&gt;带宽&lt;/li&gt;
              &lt;li&gt;网卡&lt;/li&gt;
              &lt;li&gt;CPU&lt;/li&gt;
              &lt;li&gt;内存&lt;/li&gt;
              &lt;li&gt;磁盘&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;架构的几个核心思想&quot;&gt;架构的几个核心思想&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;横向的拆分(分层)
    &lt;ul&gt;
      &lt;li&gt;系统的分层
        &lt;ul&gt;
          &lt;li&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;代码的分层
        &lt;ul&gt;
          &lt;li&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;纵向的拆分(分割)
    &lt;ul&gt;
      &lt;li&gt;服务的分割
        &lt;ul&gt;
          &lt;li&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;数据库的分割
        &lt;ul&gt;
          &lt;li&gt;分库/分表&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;分布式
    &lt;ul&gt;
      &lt;li&gt;分割后，把服务部署到多台服务器上&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;集群
    &lt;ul&gt;
      &lt;li&gt;相同功能的服务部署到多台服务上&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;缓存
    &lt;ul&gt;
      &lt;li&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;异步
    &lt;ul&gt;
      &lt;li&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;冗余
    &lt;ul&gt;
      &lt;li&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;自动化
    &lt;ul&gt;
      &lt;li&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;安全
    &lt;ul&gt;
      &lt;li&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;
</description>
        <pubDate>Sat, 11 Dec 2021 22:00:00 +0800</pubDate>
        <link>http://www.louishwh.top/2021/12/11/%E6%9E%B6%E6%9E%84-%E6%9E%B6%E6%9E%84%E6%A8%A1%E5%BC%8F/</link>
        <guid isPermaLink="true">http://www.louishwh.top/2021/12/11/%E6%9E%B6%E6%9E%84-%E6%9E%B6%E6%9E%84%E6%A8%A1%E5%BC%8F/</guid>
        
        <category>架构</category>
        
        
        <category>服务端</category>
        
      </item>
    
      <item>
        <title>架构_Web架构演化历程</title>
        <description>
</description>
        <pubDate>Sun, 05 Dec 2021 22:00:00 +0800</pubDate>
        <link>http://www.louishwh.top/2021/12/05/%E6%9E%B6%E6%9E%84_%E6%BC%94%E5%8C%96%E5%8E%86%E7%A8%8B/</link>
        <guid isPermaLink="true">http://www.louishwh.top/2021/12/05/%E6%9E%B6%E6%9E%84_%E6%BC%94%E5%8C%96%E5%8E%86%E7%A8%8B/</guid>
        
        <category>架构</category>
        
        
        <category>服务端</category>
        
      </item>
    
  </channel>
</rss>
