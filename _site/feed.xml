<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title></title>
    <description></description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Mon, 11 Mar 2024 00:25:18 +0800</pubDate>
    <lastBuildDate>Mon, 11 Mar 2024 00:25:18 +0800</lastBuildDate>
    <generator>Jekyll v4.0.0</generator>
    
      <item>
        <title>消息队列三 MQ产品 Kafka</title>
        <description>&lt;h3 id=&quot;常用的消息队列&quot;&gt;常用的消息队列&lt;/h3&gt;
</description>
        <pubDate>Sat, 24 Sep 2022 09:00:00 +0800</pubDate>
        <link>http://localhost:4000/2022/09/24/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97-%E4%BA%A7%E5%93%81-Kafka/</link>
        <guid isPermaLink="true">http://localhost:4000/2022/09/24/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97-%E4%BA%A7%E5%93%81-Kafka/</guid>
        
        <category>【消息队列】</category>
        
        
        <category>【服务端-中间件】</category>
        
      </item>
    
      <item>
        <title>消息队列三 MQ产品 RabbitMQ</title>
        <description>&lt;h3 id=&quot;常用的消息队列&quot;&gt;常用的消息队列&lt;/h3&gt;
</description>
        <pubDate>Sat, 17 Sep 2022 09:00:00 +0800</pubDate>
        <link>http://localhost:4000/2022/09/17/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97-%E4%BA%A7%E5%93%81-RabbitMQ/</link>
        <guid isPermaLink="true">http://localhost:4000/2022/09/17/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97-%E4%BA%A7%E5%93%81-RabbitMQ/</guid>
        
        <category>【消息队列】</category>
        
        
        <category>【服务端-中间件】</category>
        
      </item>
    
      <item>
        <title>消息队列二 协议</title>
        <description>&lt;h3 id=&quot;目录&quot;&gt;目录&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;几个重要的消息队列协议&lt;/li&gt;
  &lt;li&gt;AMQP&lt;/li&gt;
  &lt;li&gt;MQTT&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;重要的消息队列协议&quot;&gt;重要的消息队列协议&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.amqp.org/&quot;&gt;AMQP&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;RabbitMQ&lt;/li&gt;
      &lt;li&gt;Apache Apollo&lt;/li&gt;
      &lt;li&gt;Apache ActiveMQ&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://mqtt.org/&quot;&gt;MQTT&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;RabbitMQ&lt;/li&gt;
      &lt;li&gt;Apache Apollo&lt;/li&gt;
      &lt;li&gt;Apache ActiveMQ&lt;/li&gt;
      &lt;li&gt;HiveMQ&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://stomp.github.io/stomp-specification-1.2.html&quot;&gt;STOMP&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;RabbitMQ&lt;/li&gt;
      &lt;li&gt;Apache Apollo&lt;/li&gt;
      &lt;li&gt;Apache ActiveMQ&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://xmpp.org/&quot;&gt;XMPP&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.oracle.com/technical-resources/articles/java/intro-java-message-service.html&quot;&gt;JMS&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;amqp&quot;&gt;AMQP&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;mqtt&quot;&gt;MQTT&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Sat, 10 Sep 2022 09:00:00 +0800</pubDate>
        <link>http://localhost:4000/2022/09/10/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97-%E5%8D%8F%E8%AE%AE/</link>
        <guid isPermaLink="true">http://localhost:4000/2022/09/10/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97-%E5%8D%8F%E8%AE%AE/</guid>
        
        <category>【消息队列】</category>
        
        
        <category>【服务端-中间件】</category>
        
      </item>
    
      <item>
        <title>消息队列一 整体认识</title>
        <description>&lt;h3 id=&quot;文章目录&quot;&gt;文章目录&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;系统间通信&lt;/li&gt;
  &lt;li&gt;为什么用消息队列？&lt;/li&gt;
  &lt;li&gt;消息队列的特点？&lt;/li&gt;
  &lt;li&gt;消息队列需要应对的重要问题&lt;/li&gt;
  &lt;li&gt;重要的几个消息队列&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;1系统间通信&quot;&gt;1.系统间通信&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;大型系统往往会拆分成多个子系统：
    &lt;ul&gt;
      &lt;li&gt;分布式应用：一个业务拆分成多个子业务部署在不同服务器上&lt;/li&gt;
      &lt;li&gt;集群应用：一个业务部署在多台服务器上&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;系统间如何进行通信？
    &lt;ul&gt;
      &lt;li&gt;远程过程调用（RPC）&lt;/li&gt;
      &lt;li&gt;消息队列（MQ）&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;2为什么要用消息队列&quot;&gt;2.为什么要用消息队列？&lt;/h4&gt;
&lt;ol&gt;
  &lt;li&gt;解耦：调用方和发送方不需要知道对方&lt;/li&gt;
  &lt;li&gt;流量削峰：请求持久化，逐步处理&lt;/li&gt;
  &lt;li&gt;日志收集：参照2，避免日志成为瓶颈。&lt;/li&gt;
  &lt;li&gt;事务最终一致性：分布式事务&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;3消息队列模型&quot;&gt;3.消息队列模型&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;[生产者] —(消息)—&amp;gt; [处理中心] —(消息)—&amp;gt; [消费者]
    &lt;ul&gt;
      &lt;li&gt;生产者(Producer): 产生和发送消息到处理中心&lt;/li&gt;
      &lt;li&gt;处理中心(Broker): 接受、存储、转发消息&lt;/li&gt;
      &lt;li&gt;消费者(Consumer)：从处理中心获取消息&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;4消息队列需要应对的重要问题&quot;&gt;4.消息队列需要应对的重要问题&lt;/h4&gt;
&lt;ol&gt;
  &lt;li&gt;消息堆积&lt;/li&gt;
  &lt;li&gt;消息持久&lt;/li&gt;
  &lt;li&gt;可靠投递&lt;/li&gt;
  &lt;li&gt;消息重复&lt;/li&gt;
  &lt;li&gt;严格有序&lt;/li&gt;
  &lt;li&gt;高可用-&amp;gt; 集群&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;5-常用的消息队列产品&quot;&gt;5. 常用的消息队列产品&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://kafka.apache.org/&quot;&gt;️Kafka&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://rabbitmq.com/&quot;&gt;RabbitMQ&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/apache/rocketmq&quot;&gt;RocketMQ&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/apache/activemq&quot;&gt;ActiveMQ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Sat, 03 Sep 2022 09:00:00 +0800</pubDate>
        <link>http://localhost:4000/2022/09/03/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97-%E6%95%B4%E4%BD%93/</link>
        <guid isPermaLink="true">http://localhost:4000/2022/09/03/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97-%E6%95%B4%E4%BD%93/</guid>
        
        <category>【消息队列】</category>
        
        
        <category>【服务端-中间件】</category>
        
      </item>
    
      <item>
        <title>服务端@Java@JVM@ClassFormat</title>
        <description>&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.oracle.com/javase/specs/index.html&quot;&gt;Java语言规范&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;class文件结构&quot;&gt;Class文件结构&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;magic
    &lt;ul&gt;
      &lt;li&gt;CAFEBABE&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;minor version
    &lt;ul&gt;
      &lt;li&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;major version
    &lt;ul&gt;
      &lt;li&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;constant_pool_count
    &lt;ul&gt;
      &lt;li&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;constant_pool
    &lt;ul&gt;
      &lt;li&gt;1 CONSTANT_Utf8_info
        &lt;ul&gt;
          &lt;li&gt;1字节
            &lt;ul&gt;
              &lt;li&gt;标识符&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;length
            &lt;ul&gt;
              &lt;li&gt;&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;bytes
            &lt;ul&gt;
              &lt;li&gt;&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;3 CONSTANT_Integer_info
        &lt;ul&gt;
          &lt;li&gt;4字节
            &lt;ul&gt;
              &lt;li&gt;Big-Endin(高位在前)&lt;/li&gt;
              &lt;li&gt;int&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;4 CONSTANT_Float_info
        &lt;ul&gt;
          &lt;li&gt;4字节
            &lt;ul&gt;
              &lt;li&gt;Big-Endin(高位在前)&lt;/li&gt;
              &lt;li&gt;float&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;5 CONSTANT_Long_info
        &lt;ul&gt;
          &lt;li&gt;8字节
            &lt;ul&gt;
              &lt;li&gt;Big-Endin(高位在前)&lt;/li&gt;
              &lt;li&gt;long&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;6 CONSTANT_Double_info
        &lt;ul&gt;
          &lt;li&gt;8字节
            &lt;ul&gt;
              &lt;li&gt;Big-Endin(高位在前)&lt;/li&gt;
              &lt;li&gt;double&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;7 CONSTANT_Class_info
        &lt;ul&gt;
          &lt;li&gt;2字节
            &lt;ul&gt;
              &lt;li&gt;指向类的全限定名项的索引&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;8 CONSTANT_String_info
        &lt;ul&gt;
          &lt;li&gt;2字节
            &lt;ul&gt;
              &lt;li&gt;指向字符串字面量的索引&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;9 CONSTANT_Fieldref_info
        &lt;ul&gt;
          &lt;li&gt;2字节
            &lt;ul&gt;
              &lt;li&gt;指向申明字段的类或者接口描述符&lt;/li&gt;
              &lt;li&gt;CONSTANT_Class_info的索引项&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;2字节
            &lt;ul&gt;
              &lt;li&gt;指向字段描述符号&lt;/li&gt;
              &lt;li&gt;CONSTANT_NameAndType_info的索引项&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;10 CONSTANT_Methodref_info
        &lt;ul&gt;
          &lt;li&gt;2字节
            &lt;ul&gt;
              &lt;li&gt;指向声明方法的类或者接口描述符&lt;/li&gt;
              &lt;li&gt;CONSTANT_Class_info的索引项&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;2字节
            &lt;ul&gt;
              &lt;li&gt;指向字段描述符号&lt;/li&gt;
              &lt;li&gt;CONSTANT_NameAndType_info的索引项&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;11 CONSTANT_InterfaceMethodref_info
        &lt;ul&gt;
          &lt;li&gt;2字节
            &lt;ul&gt;
              &lt;li&gt;指向声明方法的类或者接口描述符&lt;/li&gt;
              &lt;li&gt;CONSTANT_Class_info的索引项&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;2字节
            &lt;ul&gt;
              &lt;li&gt;指向字段描述符号&lt;/li&gt;
              &lt;li&gt;CONSTANT_NameAndType_info的索引项&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;12 CONSTANT_NameAndType_info
        &lt;ul&gt;
          &lt;li&gt;2字节
            &lt;ul&gt;
              &lt;li&gt;指向该字段或方法名称常量项的索引&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;2字节
            &lt;ul&gt;
              &lt;li&gt;指向该字段或方法描述符常量项的索引&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;15 CONSTANT_MethodHandle_info
        &lt;ul&gt;
          &lt;li&gt;1字节
            &lt;ul&gt;
              &lt;li&gt;reference_kind 1-9之间的值&lt;/li&gt;
              &lt;li&gt;决定了方法句柄的类型&lt;/li&gt;
              &lt;li&gt;方法句柄类型的值表示方法句柄的字节码行为&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;16 CONSTANT_MethodType_info
        &lt;ul&gt;
          &lt;li&gt;2字节
            &lt;ul&gt;
              &lt;li&gt;descriptor_index&lt;/li&gt;
              &lt;li&gt;指向Utf8_info结构表示的方法描述符&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;18 CONSTANT_InvokeDynamic_info
        &lt;ul&gt;
          &lt;li&gt;2字节
            &lt;ul&gt;
              &lt;li&gt;bootstrap_method_attr_index&lt;/li&gt;
              &lt;li&gt;当前Class文件中引导方法表的bootstrap_methods[] 数组的有效索引&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;2字节
            &lt;ul&gt;
              &lt;li&gt;指向NameAndType_info表示的方法名和方法描述符&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;access_flags
    &lt;ul&gt;
      &lt;li&gt;ACC_PUBLIC 0x0001 是否是public&lt;/li&gt;
      &lt;li&gt;ACC_FINAL 0x0010 是否是final&lt;/li&gt;
      &lt;li&gt;ACC_SUPER 0x0020 必须为真&lt;/li&gt;
      &lt;li&gt;ACC_INTERFACE 0x0200 是否是接口&lt;/li&gt;
      &lt;li&gt;ACC_ABSTRACT 0x1000 接口或抽象类&lt;/li&gt;
      &lt;li&gt;ACC_SUNTHETIC 0x1000 编译器自动生成&lt;/li&gt;
      &lt;li&gt;ACC_ANNOTATION 0x2000&lt;/li&gt;
      &lt;li&gt;ACC_ENUM 0x4000&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;this_class
    &lt;ul&gt;
      &lt;li&gt;当前类&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;super_class
    &lt;ul&gt;
      &lt;li&gt;父类&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;interface_count
    &lt;ul&gt;
      &lt;li&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;interfaces&lt;/li&gt;
  &lt;li&gt;filds_count&lt;/li&gt;
  &lt;li&gt;fields
    &lt;ul&gt;
      &lt;li&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;methods_count
    &lt;ul&gt;
      &lt;li&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;method_info&lt;/li&gt;
  &lt;li&gt;attribute_count&lt;/li&gt;
  &lt;li&gt;attribute&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;class加载过程&quot;&gt;Class加载过程&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;load
    &lt;ul&gt;
      &lt;li&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Link：静态变量赋默认值
    &lt;ol&gt;
      &lt;li&gt;Verification&lt;/li&gt;
      &lt;li&gt;Preparation
        &lt;ul&gt;
          &lt;li&gt;&lt;/li&gt;
          &lt;li&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Resolution
        &lt;ul&gt;
          &lt;li&gt;符号引用解析为直接引用&lt;/li&gt;
          &lt;li&gt;常量池里面的符号解析为指针、偏移量的内存的直接引用&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;Initializing
    &lt;ol&gt;
      &lt;li&gt;调用类初始化代码&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;new对象的过程&quot;&gt;New对象的过程&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;申请内存
    &lt;ul&gt;
      &lt;li&gt;赋默认值&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;构造方法
    &lt;ul&gt;
      &lt;li&gt;设置初始值&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;类加载器层次&quot;&gt;类加载器层次&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;自顶而下：进行实际查找和加载child方向&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;自底向上：惊醒检查该类是否已经加载parent方向&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;加载层级(Launcher源码)
    &lt;ul&gt;
      &lt;li&gt;Bootstrap
        &lt;ul&gt;
          &lt;li&gt;加载lib/rt.jar charset.jar等核心类：C++实现&lt;/li&gt;
          &lt;li&gt;sun.boot.class.path&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Extension
        &lt;ul&gt;
          &lt;li&gt;加载拓展jar包，jre/lib/ext/*.jar&lt;/li&gt;
          &lt;li&gt;或由-Djava.ext.dirs指定&lt;/li&gt;
          &lt;li&gt;java.ext.dirs&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;App
        &lt;ul&gt;
          &lt;li&gt;加载classpath指定内容&lt;/li&gt;
          &lt;li&gt;java.class.path&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Custom ClassLoader
        &lt;ul&gt;
          &lt;li&gt;自定义ClassLoader&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;加载机制
    &lt;ul&gt;
      &lt;li&gt;双亲委派
  -&lt;/li&gt;
      &lt;li&gt;为什么用双亲委派？
        &lt;ul&gt;
          &lt;li&gt;主：安全机制&lt;/li&gt;
          &lt;li&gt;次：资源节约&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;java并发操作&quot;&gt;Java并发操作&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Java并发内存模型
    &lt;ul&gt;
      &lt;li&gt;Java线程–工作内存–Save和Load操作 &amp;lt;===&amp;gt; 主内存&lt;/li&gt;
      &lt;li&gt;Java线程–工作内存–Save和Load操作 &amp;lt;===&amp;gt; 主内存&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;volatile
    &lt;ul&gt;
      &lt;li&gt;字节码层面
        &lt;ul&gt;
          &lt;li&gt;ACC_VOLATILE&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;JVM层面： volatile内存区的读写都加屏障
        &lt;ul&gt;
          &lt;li&gt;写
            &lt;ul&gt;
              &lt;li&gt;StoreStoreBarrier&lt;/li&gt;
              &lt;li&gt;写操作&lt;/li&gt;
              &lt;li&gt;StoreLoadBarrier&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;读
            &lt;ul&gt;
              &lt;li&gt;LoadLoadBarrier&lt;/li&gt;
              &lt;li&gt;读操作&lt;/li&gt;
              &lt;li&gt;LoadStoreBarrier&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://blog.csdn.net/qq_26222859/article/details/52235930&quot;&gt;OS和硬件层面&lt;/a&gt;
        &lt;ul&gt;
          &lt;li&gt;hsdis-HotSpot Dis Assembler
            &lt;ul&gt;
              &lt;li&gt;windows lock指令实现&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;synchronized
    &lt;ul&gt;
      &lt;li&gt;字节码层面
        &lt;ul&gt;
          &lt;li&gt;ACC_SYNCHRONIZED&lt;/li&gt;
          &lt;li&gt;monitorenter&lt;/li&gt;
          &lt;li&gt;monitorexit&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;JVM层面
        &lt;ul&gt;
          &lt;li&gt;C/C++调用了系统提供的同步机制&lt;/li&gt;
          &lt;li&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://blog.csdn.net/21aspnet/article/details/88571740&quot;&gt;OS和硬件层面&lt;/a&gt;
        &lt;ul&gt;
          &lt;li&gt;X86: lock comxchg xxx&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;jvm重排序规则&quot;&gt;JVM重排序规则&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;hanppens-before原则
    &lt;ul&gt;
      &lt;li&gt;JLS17.4.5&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;as if serial
    &lt;ul&gt;
      &lt;li&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;对象的内存布局&quot;&gt;对象的内存布局&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;对象的创建过程？
    &lt;ol&gt;
      &lt;li&gt;class loading&lt;/li&gt;
      &lt;li&gt;class linking()&lt;/li&gt;
      &lt;li&gt;class initializing&lt;/li&gt;
      &lt;li&gt;申请对象内存&lt;/li&gt;
      &lt;li&gt;成员变量赋默认值&lt;/li&gt;
      &lt;li&gt;调用构造方法&lt;init&gt;
&lt;/init&gt;        &lt;ol&gt;
          &lt;li&gt;成员变量顺序赋初始值&lt;/li&gt;
          &lt;li&gt;执行构造方法语句&lt;/li&gt;
        &lt;/ol&gt;
      &lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;对象在内存中的存储布局？
    &lt;ul&gt;
      &lt;li&gt;虚拟机配置&lt;/li&gt;
      &lt;li&gt;普通对象
        &lt;ol&gt;
          &lt;li&gt;对象头 markword 8&lt;/li&gt;
          &lt;li&gt;ClassPointer指针&lt;/li&gt;
          &lt;li&gt;实例数据
            &lt;ul&gt;
              &lt;li&gt;引用类型：-XX:+UseCompressedOops为4字节，不开启8字节
                &lt;ul&gt;
                  &lt;li&gt;ordinary object pointers&lt;/li&gt;
                &lt;/ul&gt;
              &lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;Padding对齐，8的倍数&lt;/li&gt;
        &lt;/ol&gt;
      &lt;/li&gt;
      &lt;li&gt;数组对象
        &lt;ol&gt;
          &lt;li&gt;对象头 markword 8&lt;/li&gt;
          &lt;li&gt;ClassPointer指针
            &lt;ul&gt;
              &lt;li&gt;-XX:+UseCompressedOops为4字节，不开启8字节&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;数组长度：4字节&lt;/li&gt;
          &lt;li&gt;数组数据&lt;/li&gt;
          &lt;li&gt;对齐，8的倍数&lt;/li&gt;
        &lt;/ol&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;对象头具体包括什么？
    &lt;ul&gt;
      &lt;li&gt;通过JavaAgent机制获取
        &lt;ul&gt;
          &lt;li&gt;Instrumentation
            &lt;ul&gt;
              &lt;li&gt;getObjectSize&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;markword
        &lt;ul&gt;
          &lt;li&gt;无锁态&lt;/li&gt;
          &lt;li&gt;轻量级锁&lt;/li&gt;
          &lt;li&gt;重量级锁&lt;/li&gt;
          &lt;li&gt;GC标记&lt;/li&gt;
          &lt;li&gt;偏向锁&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;对象怎么定位？
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://blog.csdn.net/clover_lily/article/details/80095580&quot;&gt;参考&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;句柄池
        &lt;ul&gt;
          &lt;li&gt;间接指针: GC占优
            &lt;ul&gt;
              &lt;li&gt;Object&lt;/li&gt;
              &lt;li&gt;Class&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;直接指针: 执行占优
        &lt;ul&gt;
          &lt;li&gt;Object&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;对象怎么分配？
    &lt;ul&gt;
      &lt;li&gt;GC相关内容&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;对象大小的实例
    &lt;ul&gt;
      &lt;li&gt;new Object()对象占多少个字节？
        &lt;ul&gt;
          &lt;li&gt;16字节
            &lt;ul&gt;
              &lt;li&gt;对象头头8字节&lt;/li&gt;
              &lt;li&gt;ClassPointer指针 4字节&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;hotspot开启内存压缩的规则&quot;&gt;Hotspot开启内存压缩的规则&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;4G以下，直接砍掉&lt;/li&gt;
  &lt;li&gt;4G-32G,默认开启内存压缩 ClassPointers Oops&lt;/li&gt;
  &lt;li&gt;32G，压缩无效，使用64位&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;jvm-runtime-data-area-and-jvm-instructions&quot;&gt;JVM Runtime Data Area and JVM Instructions&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Data Area
    &lt;ul&gt;
      &lt;li&gt;Program Counter
        &lt;ul&gt;
          &lt;li&gt;存放执行位置&lt;/li&gt;
          &lt;li&gt;虚拟机的运行类似while循环&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;JVM stacks
        &lt;ol&gt;
          &lt;li&gt;Frame:栈桢
            &lt;ul&gt;
              &lt;li&gt;Local Variable Table&lt;/li&gt;
              &lt;li&gt;Operated Stacks&lt;/li&gt;
              &lt;li&gt;Dynamic Linking&lt;/li&gt;
              &lt;li&gt;Return Address&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;一个方法对应一个栈帧
            &lt;ul&gt;
              &lt;li&gt;&lt;/li&gt;
              &lt;li&gt;&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ol&gt;
      &lt;/li&gt;
      &lt;li&gt;Heap
        &lt;ul&gt;
          &lt;li&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Native Method stacks
        &lt;ul&gt;
          &lt;li&gt;C/C++&lt;/li&gt;
          &lt;li&gt;JNI&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Direct Memory
        &lt;ul&gt;
          &lt;li&gt;NIO，zero copy&lt;/li&gt;
          &lt;li&gt;JVM可以直接访问的内核的内存&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Method Area
        &lt;ul&gt;
          &lt;li&gt;run-time constant pool&lt;/li&gt;
          &lt;li&gt;Content
            &lt;ol&gt;
              &lt;li&gt;Perm Space(&amp;lt; 1.8)
                &lt;ul&gt;
                  &lt;li&gt;字符串常量位于此&lt;/li&gt;
                  &lt;li&gt;FGC不会清理&lt;/li&gt;
                  &lt;li&gt;大小启动的时候指定，不能变&lt;/li&gt;
                &lt;/ul&gt;
              &lt;/li&gt;
              &lt;li&gt;Meta Space(&amp;gt;=1.8)
                &lt;ul&gt;
                  &lt;li&gt;字符串常量位于堆区&lt;/li&gt;
                  &lt;li&gt;会触发FGC清理&lt;/li&gt;
                  &lt;li&gt;不设定的话，最大就是物理内存&lt;/li&gt;
                &lt;/ul&gt;
              &lt;/li&gt;
            &lt;/ol&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;jvm-instruction-set&quot;&gt;JVM Instruction Set&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;store&lt;/li&gt;
  &lt;li&gt;load&lt;/li&gt;
  &lt;li&gt;pop&lt;/li&gt;
  &lt;li&gt;mul&lt;/li&gt;
  &lt;li&gt;sub&lt;/li&gt;
  &lt;li&gt;add&lt;/li&gt;
  &lt;li&gt;invoke
    &lt;ul&gt;
      &lt;li&gt;invokestatic&lt;/li&gt;
      &lt;li&gt;invokevirtual
        &lt;ul&gt;
          &lt;li&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;invokeinterface&lt;/li&gt;
      &lt;li&gt;invokespecial
        &lt;ul&gt;
          &lt;li&gt;可以直接定位，不需要多台的方法
            &lt;ul&gt;
              &lt;li&gt;private 方法&lt;/li&gt;
              &lt;li&gt;构造方法&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;invokedynamic:最难
        &lt;ul&gt;
          &lt;li&gt;lambda表达式&lt;/li&gt;
          &lt;li&gt;反射&lt;/li&gt;
          &lt;li&gt;其他动态语言：scala kotlin&lt;/li&gt;
          &lt;li&gt;CGLib ASM&lt;/li&gt;
          &lt;li&gt;动态产生的Class&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;garbage-collector-gc-turninig&quot;&gt;Garbage Collector GC turninig&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;熟悉GC常用算法，熟悉常见垃圾收集器，具有实际JVM调优经验&lt;/li&gt;
  &lt;li&gt;Garbage
    &lt;ul&gt;
      &lt;li&gt;没有引用指向的对象&lt;/li&gt;
      &lt;li&gt;&lt;/li&gt;
      &lt;li&gt;root searching
        &lt;ul&gt;
          &lt;li&gt;GC roots
            &lt;ul&gt;
              &lt;li&gt;线程栈变量&lt;/li&gt;
              &lt;li&gt;静态变量&lt;/li&gt;
              &lt;li&gt;常量池&lt;/li&gt;
              &lt;li&gt;JNI指针&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;GC Algorithms
        &lt;ul&gt;
          &lt;li&gt;Mark-Sweep
            &lt;ul&gt;
              &lt;li&gt;两次&lt;/li&gt;
              &lt;li&gt;&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;Copying
            &lt;ul&gt;
              &lt;li&gt;一次&lt;/li&gt;
              &lt;li&gt;&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;Mark-Compact
            &lt;ul&gt;
              &lt;li&gt;两次&lt;/li&gt;
              &lt;li&gt;&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;堆内存逻辑分区（不适合不分代垃圾收集器）
    &lt;ul&gt;
      &lt;li&gt;⚠️
        &lt;ul&gt;
          &lt;li&gt;除了Epsilon ZGC Shenandoah 之外的GC都是使用逻辑分代模型&lt;/li&gt;
          &lt;li&gt;G1是逻辑分代，物理不分代&lt;/li&gt;
          &lt;li&gt;除此之外不仅逻辑分代，而且物理分代&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;新生代： MinorGC/YGC
        &lt;ul&gt;
          &lt;li&gt;eden: 8&lt;/li&gt;
          &lt;li&gt;survivor: 1&lt;/li&gt;
          &lt;li&gt;survivor: 1
            &lt;ul&gt;
              &lt;li&gt;Copying&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;复制年龄超过限制时，进入old区。通过参数：-XX:MaxTenuringThreshold配置&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;老年代: MajorGC/FullGC
        &lt;ul&gt;
          &lt;li&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;内存详解
    &lt;ul&gt;
      &lt;li&gt;栈上分配
        &lt;ul&gt;
          &lt;li&gt;线程私有小对象&lt;/li&gt;
          &lt;li&gt;无逃逸&lt;/li&gt;
          &lt;li&gt;支持标量替换&lt;/li&gt;
          &lt;li&gt;无需调整&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;线程本地分配TLAB
        &lt;ul&gt;
          &lt;li&gt;占用eden,默认1%&lt;/li&gt;
          &lt;li&gt;多线程的时候不用竞争eden就可以申请空间，提高效率&lt;/li&gt;
          &lt;li&gt;小对象&lt;/li&gt;
          &lt;li&gt;无需调整&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;老年代
        &lt;ul&gt;
          &lt;li&gt;超过XX:MaxTenuringThreshold指定次数YGC
            &lt;ul&gt;
              &lt;li&gt;Parallel Scavenge 15&lt;/li&gt;
              &lt;li&gt;CMS 6&lt;/li&gt;
              &lt;li&gt;G1 15&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;动态年龄
            &lt;ul&gt;
              &lt;li&gt;s1-&amp;gt;s2超过累加50%&lt;/li&gt;
              &lt;li&gt;把年龄最大的放入Old&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;YGC期间 survivor区空间不够了，空间担保直接进入老年代&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;常见的垃圾回收器
    &lt;ul&gt;
      &lt;li&gt;单线程
        &lt;ul&gt;
          &lt;li&gt;Serial
            &lt;ul&gt;
              &lt;li&gt;安全点线程停止，&lt;/li&gt;
              &lt;li&gt;单CPU效率最高&lt;/li&gt;
              &lt;li&gt;虚拟机时Client模式的默认垃圾回收器&lt;/li&gt;
              &lt;li&gt;使用极少&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;Serial Old
            &lt;ul&gt;
              &lt;li&gt;&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;多线程
        &lt;ul&gt;
          &lt;li&gt;Parallel Scavenge(PS) + Parallel Old(PO)
            &lt;ul&gt;
              &lt;li&gt;吞吐量优先&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;ParNew+CMS
            &lt;ul&gt;
              &lt;li&gt;CMS：
                &lt;ul&gt;
                  &lt;li&gt;开启了并发回收的过程&lt;/li&gt;
                  &lt;li&gt;CMS问题比较多
                    &lt;ul&gt;
                      &lt;li&gt;内存碎片&lt;/li&gt;
                      &lt;li&gt;浮动垃圾&lt;/li&gt;
                    &lt;/ul&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/li&gt;
              &lt;li&gt;响应事件优先
                &lt;ul&gt;
                  &lt;li&gt;&lt;/li&gt;
                &lt;/ul&gt;
              &lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;ZGC&lt;/li&gt;
      &lt;li&gt;G1&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Remark阶段的算法
    &lt;ul&gt;
      &lt;li&gt;三色扫描算法
        &lt;ul&gt;
          &lt;li&gt;白 灰 黑&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;并发标记时&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;jvm调优&quot;&gt;JVM调优&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;-XX:+UseSerialGC
    &lt;ul&gt;
      &lt;li&gt;Serial New + Serial Old&lt;/li&gt;
      &lt;li&gt;小型程序&lt;/li&gt;
      &lt;li&gt;默认情况下不会是这种选项，Hotspot会根据计算及配置和JDK版本自动选择收集器&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;-XX:+UseParNewGC
    &lt;ul&gt;
      &lt;li&gt;ParNew + SerialOld&lt;/li&gt;
      &lt;li&gt;很少用&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;-XX:UserConcMarkSweepGC
    &lt;ul&gt;
      &lt;li&gt;ParNew + CMS + Serial Old&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;-XX:UseParallelGC
    &lt;ul&gt;
      &lt;li&gt;Parallel Scavenge + Parallel Old&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;-XX:UseParallelOldGC
    &lt;ul&gt;
      &lt;li&gt;Parallel Scavenge + Parallel Old&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;-XX:UseG1GC
    &lt;ul&gt;
      &lt;li&gt;G1&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Linux中默认&lt;/li&gt;
  &lt;li&gt;Linux 1.8
    &lt;ul&gt;
      &lt;li&gt;1.8.0_181 默认 Copy MarkCompact&lt;/li&gt;
      &lt;li&gt;1.8.0_222 默认 PS + PO&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Sun, 20 Mar 2022 09:00:00 +0800</pubDate>
        <link>http://localhost:4000/2022/03/20/%E6%9C%8D%E5%8A%A1%E7%AB%AF@Java@JVM@ClassFormat/</link>
        <guid isPermaLink="true">http://localhost:4000/2022/03/20/%E6%9C%8D%E5%8A%A1%E7%AB%AF@Java@JVM@ClassFormat/</guid>
        
        <category>【Java】</category>
        
        
        <category>【服务端】</category>
        
      </item>
    
      <item>
        <title>服务端@java@springboot</title>
        <description>
</description>
        <pubDate>Mon, 31 Jan 2022 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2022/01/31/%E6%9C%8D%E5%8A%A1%E7%AB%AF@Java@SpringBoot/</link>
        <guid isPermaLink="true">http://localhost:4000/2022/01/31/%E6%9C%8D%E5%8A%A1%E7%AB%AF@Java@SpringBoot/</guid>
        
        
      </item>
    
      <item>
        <title>服务端@Java@Spring体系</title>
        <description>
</description>
        <pubDate>Sat, 29 Jan 2022 21:00:00 +0800</pubDate>
        <link>http://localhost:4000/2022/01/29/%E6%9C%8D%E5%8A%A1%E7%AB%AF@Java@Spring%E4%BD%93%E7%B3%BB/</link>
        <guid isPermaLink="true">http://localhost:4000/2022/01/29/%E6%9C%8D%E5%8A%A1%E7%AB%AF@Java@Spring%E4%BD%93%E7%B3%BB/</guid>
        
        <category>【Java】</category>
        
        
        <category>【服务端】</category>
        
      </item>
    
      <item>
        <title>服务端@Java@Spring</title>
        <description>&lt;h3 id=&quot;spring核心架构&quot;&gt;Spring核心架构&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;AOP&lt;/li&gt;
  &lt;li&gt;ORM&lt;/li&gt;
  &lt;li&gt;Web&lt;/li&gt;
  &lt;li&gt;Web MVC&lt;/li&gt;
  &lt;li&gt;DAO&lt;/li&gt;
  &lt;li&gt;Context&lt;/li&gt;
  &lt;li&gt;Core&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;###&lt;/p&gt;
</description>
        <pubDate>Sat, 22 Jan 2022 21:00:00 +0800</pubDate>
        <link>http://localhost:4000/2022/01/22/%E6%9C%8D%E5%8A%A1%E7%AB%AF@Java@Spring/</link>
        <guid isPermaLink="true">http://localhost:4000/2022/01/22/%E6%9C%8D%E5%8A%A1%E7%AB%AF@Java@Spring/</guid>
        
        <category>【Java】</category>
        
        
        <category>【服务端】</category>
        
      </item>
    
      <item>
        <title>ESP32初体验</title>
        <description>
</description>
        <pubDate>Sun, 16 Jan 2022 21:00:00 +0800</pubDate>
        <link>http://localhost:4000/2022/01/16/ESP32%E5%88%9D%E4%BD%93%E9%AA%8C/</link>
        <guid isPermaLink="true">http://localhost:4000/2022/01/16/ESP32%E5%88%9D%E4%BD%93%E9%AA%8C/</guid>
        
        <category>【ESP】</category>
        
        
        <category>【物联网】</category>
        
      </item>
    
      <item>
        <title>服务端@Java@核心拓展库</title>
        <description>&lt;h3 id=&quot;guava&quot;&gt;&lt;a href=&quot;https://github.com/google/guava&quot;&gt;Guava&lt;/a&gt;&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;基本工具 [Basic utilities]&lt;/li&gt;
  &lt;li&gt;集合[Collections]&lt;/li&gt;
  &lt;li&gt;缓存[Caches]&lt;/li&gt;
  &lt;li&gt;函数式风格[Functional idioms]&lt;/li&gt;
  &lt;li&gt;并发[Concurrency]&lt;/li&gt;
  &lt;li&gt;字符串处理[Strings]&lt;/li&gt;
  &lt;li&gt;原生类型[Primitives]&lt;/li&gt;
  &lt;li&gt;区间[Ranges]&lt;/li&gt;
  &lt;li&gt;I/O&lt;/li&gt;
  &lt;li&gt;散列[Hash]&lt;/li&gt;
  &lt;li&gt;事件总线[EventBus]&lt;/li&gt;
  &lt;li&gt;数学运算[Math]&lt;/li&gt;
  &lt;li&gt;反射[Reflection]&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;apache-commons&quot;&gt;&lt;a href=&quot;https://github.com/apache/commons-lang&quot;&gt;Apache Commons&lt;/a&gt;&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;Commons BeanUtils&lt;/li&gt;
  &lt;li&gt;Commons CLI&lt;/li&gt;
  &lt;li&gt;Commons Codec&lt;/li&gt;
  &lt;li&gt;Commons Collections&lt;/li&gt;
  &lt;li&gt;Commons Configuration&lt;/li&gt;
  &lt;li&gt;Commons DbUtils&lt;/li&gt;
  &lt;li&gt;Commons FileUpload&lt;/li&gt;
  &lt;li&gt;Commons HttpClient&lt;/li&gt;
  &lt;li&gt;Commons IO&lt;/li&gt;
  &lt;li&gt;Commons JXPath&lt;/li&gt;
  &lt;li&gt;Commons Lang&lt;/li&gt;
  &lt;li&gt;Commons Logging&lt;/li&gt;
  &lt;li&gt;Commons Math&lt;/li&gt;
  &lt;li&gt;Commons Net&lt;/li&gt;
  &lt;li&gt;Commons Validator&lt;/li&gt;
  &lt;li&gt;Commons Virtual File System&lt;/li&gt;
&lt;/ol&gt;

</description>
        <pubDate>Sat, 15 Jan 2022 21:00:00 +0800</pubDate>
        <link>http://localhost:4000/2022/01/15/%E6%9C%8D%E5%8A%A1%E7%AB%AF@Java@%E6%A0%B8%E5%BF%83%E6%8B%93%E5%B1%95%E5%BA%93/</link>
        <guid isPermaLink="true">http://localhost:4000/2022/01/15/%E6%9C%8D%E5%8A%A1%E7%AB%AF@Java@%E6%A0%B8%E5%BF%83%E6%8B%93%E5%B1%95%E5%BA%93/</guid>
        
        <category>【Java】</category>
        
        
        <category>【服务端】</category>
        
      </item>
    
  </channel>
</rss>
